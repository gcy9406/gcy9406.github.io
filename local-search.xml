<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue常见问题整理</title>
    <link href="/2020/10/22/Vue%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <url>/2020/10/22/Vue%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="Avoid-mutating-a-prop-directly-since-the-value-will-be-overwritten-whenever-the-parent-component-re-renders-Instead-use-a-data-or-computed-property-based-on-the-prop’s-value"><a href="#Avoid-mutating-a-prop-directly-since-the-value-will-be-overwritten-whenever-the-parent-component-re-renders-Instead-use-a-data-or-computed-property-based-on-the-prop’s-value" class="headerlink" title="Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop’s value"></a>Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop’s value</h2><p>这是由于直接修改了属性值导致</p><p>原代码如下，注意属性drawer</p><pre><code>&lt;template&gt;    &lt;el-drawer    title=&quot;抽屉&quot;    :visible.sync=&quot;drawer&quot;    :with-header=&quot;false&quot;    size=&quot;600px&quot;    @open=&quot;openDrawer&quot;    @closed=&quot;drawerClosed&quot;    direction=&quot;rtl&quot;&gt;    &lt;/el-drawer&gt;&lt;/template&gt;...  props: {    drawer: {      type: Boolean,      required: true    }  },...drawerClosed() {    this.drawer = false}</code></pre><p>修改成不要直接修改属性，如下：</p><pre><code>&lt;template&gt;    &lt;el-drawer    title=&quot;抽屉&quot;    :visible.sync=&quot;drawerVisiable&quot; //自定义变量    :with-header=&quot;false&quot;    size=&quot;600px&quot;    @open=&quot;openDrawer&quot;    @closed=&quot;drawerClosed&quot;    direction=&quot;rtl&quot;&gt;    &lt;/el-drawer&gt;&lt;/template&gt;...  watch: {    drawer(newValue, oldValue) {      this.drawerVisable = newValue    }  },...drawerClosed() {    this.drawerVisable = false}</code></pre><p>结论：不要直接修改prop的值，用一个新的自定义的值替代属性变量。</p>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NodeJs</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日记2020-10-21</title>
    <link href="/2020/10/21/%E6%97%A5%E8%AE%B02020-10-21/"/>
    <url>/2020/10/21/%E6%97%A5%E8%AE%B02020-10-21/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误，请不要再试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码方可查看</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="ed309e6b8395f593c1fda0ab87a2d3346db7820ecbf653eeaf3c90d674a5c113">68c84cdbf63d6b61217a1669ecaddbdcd0a0808325790da25ba9c73ef4fd5f3e93b0c36a49007f391051959ef6ab251f45a8be01f89f1b36443fe29eddd3bfa6f2ceb9fe0bc5088d858743448fb43caac139725bcc6c178525a8282f6bc1c647362554093ca46d69df62c1aba7e464c42fcc41253d2ee85f8fd5d3a0e161984c677ed2b913aa06da3bf3fe439fd3a93e9b9ce3005dac185b92e6a3e9642fea66854fcd81c747a10356e74daa0e85f1e0ad6d6341800863dc8e259c49436fadc4566c82bd603fb2e7d488b22df0476547be59204577bd1abf2b1c11eddba23174224d53463157df70395a5a0ed4badd6c2a17d0b10139c4756c316584fc7233ce53dea83baa7c6af2d5bdd199e94a7f3ccc18c5bc2c507b9a5c18b382800e49cad9a266bdfb0995f76f8fb309ebb4be58c96b334e4b74e60b4e84d81cd892e62d57968a7502b1aef5bc20d8bea2d6431df2092ed088c3370b34c3a7d9acb720336ee28dc433cc35372a4bc84c75911bf108bd76b30f35607bf38a571ff21f19e02aa625c42ea27d1552bec83bdeb64e1dd7d398bc06124438b3012ccca4a6118bfdabf3832edb98712173ddb88d89dfc5d9898002352bb9b1c985cb0edf8b98283634682ed3da9998a87700e09751c05b8d201924a51ea4ef10aa26a78d19a81e1efa95e26b1e40dadb304c1e460dae4cff2d69abab73e5344363136697f20407d8d2b851739be62ec5525251bbfc4d615821a4116f876b79236bce4cf1bada553bb523daf228feb9c34afe5994c21dff1ad5825b90d4e88216c3cd4be5bcbeaec41de8a0d8add5ada0012c457688218aef4531f0af96beecf9fe6a5ee829f8f35486b45095cd3160ae632ca915ceb50efceb3c025036da67e9e17887716d5affd6097719215ebf8c913b97d8e5e447de52e1af546a99d047733064911859fd9e475dde5de49194b32aec259fe33260bfec7bac204af5c4ff2f3311fa53744f40d9d06740c2f0263e023fb77b2e7f0e3cccd1efffd5be10925e67e4f5dccf0177303d6cc9777c2e6d7236f95ecc96f3340fc00f7e66cadd6ef900954c0bdbf1c04e4242df81c5aa65712d6ca0e4cfa70692cd4560dd1b17acf5b278ab8adb28a7077a4336599cea266f2e4a31151484cf7edf8d8fe7f8b9e5149f7a015145c0be337009b884f530328c67ff962faaa2e47f220ba2a1f4b33b7a2c772ead564f6930b04e194414a82012856df9a78193464a37a9b72e9b4eda93d5c448872ec57ca40bd25b0e7d45420c1e4c907d4cec29865cda2d99110d4d06b7bc7dd3f0b0c831a430c36350624de09006d840d210970d37e7349ae5db08db2be1dff11551ed9180589f6e98c394bf150ae810c40fec64d38e481641afca0000470743e407dd067b4a4979939e253e50f58eb184555481600dc574d8b7b333178433a6d294bb5c0587a5db00d72b4a2358fd4948f97c75bfb3d8f9abb363f8c544b68ca81524d4f5048c749ca23eb15616d3101a52ba301a7c299bb623a0d2dc1e917e8d689a91aa6471ffa2510806b8fed0c202ce194e5bc863ac9b9fbbbc6f619b4bda35d68e428f3007c73b6078f2898de331eda89eee100cb0a365da052a915bc092790c8e4f646b389b926467a4d847535afa803694dcef903b2212271311d020175cbfca56b663bd85e27cb2effb170ca1f9eb07eb0cfd6557aae70ca96f78719119eb352ccccc53be139398a5e8685faadd4f4b099e523a94d101e62cc07fa608ebc1184e12453b8fc83385963156b31c76c6446518f667efeff5f6751d7cca5550be58fc203c441f7702f722405a6a90d4cbca31636bfb234eaa48073fdfda65902b66712dfbf4d22fdcdf70f1453b72d3fe0d14392d629820c2571d3225cf4afb97</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>日记2020-10-16</title>
    <link href="/2020/10/16/%E6%97%A5%E8%AE%B02020-10-16/"/>
    <url>/2020/10/16/%E6%97%A5%E8%AE%B02020-10-16/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误，请不要再试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码方可查看</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="574bbb67ad932d1c1a20d69d839a6bad1eac5080d1daf96b8d411c16c90b0353">7295831f3f5e7de1d2599f8b507f1dcd4736182ef27fef75054e39aaa8c1fcf8f6a08baa17de6e30de7aeac1822d572f9cef314c6c4d062defdade4ca03e0530afb0fce9ec231bf87277315492d33278a4dfd5339d4b8b217f2b6d0ff69adb2f5c1ce76b4cd4b109957a3489b5e440f05d8f13130c90d7ee0bd707102e1d3914a183e23ffbac04b721626f3a10b2a0e89da6001a7512e6fffbf85c6f0d6092d7a9ec6b9468bdcf287fd01068fce0a861ab45fecdd47f7be07d290ca62abd5fec6bf612d6d59b4e90fa4c3272c972e14ccbb5d5ded0bdd1b4a4fbd82eb7247b3f31eb205ea31daa32a90810a9b67ffbf5acb6e172862fe42c1f79523f96b06e0508d4f53b5be902c8cfc144a94a40e8195f789799652685f33c0dbf4802781d6c441f00b8d0a133d4a7d13ac2faa2b76249b6075a6345c24f02afa42c231e264228cc1730dea0ebe04df1042c0dafde0f37927c078aaf8fd1bd403b0abc1537d7de9cea691c28870fdb3cba1bf2d0fe3613b450a0e5a859cab3de91b6b0910ee40d43567bc1ebcec6a95a8a70f7f8d78894184a133542e5e73047c0fa89a91104598456117270155da41cb3ecd17975ef7cbfe312436bcd0829475feaa04b12a88a22edb91285713a28046e83ac05044f8dda56b17b3574bbe73382f843f93f7df1f4dc83a63bd78a4ac1f3bb35635a78f3aa390e399a41985d0c9b2191c9a29fb5d7466ab2d4cad1be4c23efca599faf9de47d86c11cd8cfda3c806e85f49b1a75839425fd15d8dbc4a3fe449e99a9731706c38181aa46afe9790d0b20c7259fc8d24a4ca7a2f07711a306d2d9d80901e2b11ab66e83aede34bb97c1225e233a0197a77196b4d39eee6657c679dc5bd1</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>日记2020-10-15</title>
    <link href="/2020/10/15/%E6%97%A5%E8%AE%B02020-10-15/"/>
    <url>/2020/10/15/%E6%97%A5%E8%AE%B02020-10-15/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误，请不要再试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码方可查看</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="33946615665ade0c13642c7e157f6a331c0dc3c7bdfdfeee2a9342b387137bb5">502fa3e2cf8fe96938890e524e3b30cca545376f6eb24312a5ea2700ffe068a1cad79e7b9061597e46980b1605635c68828ff041d4a22caf7cd0b7d6c5b2a18a3871b4efdea95699197d8a6ef9a72395ab083b7ffc4f342b16f9c2af609d27e9d633ab68f5a85a04e837e5618fd93ebc52c66fc912599a8b35dd56cdd8840155be7fc1a42caece0b16696d20a4e7240d55c0b18eb7594aeb15dfa095d6ec01b625a50915960db0ea9e68429be838ecc83e6feb48c24627c744c68b89eade429686176ba29af4ff29ee6c1b4cc724c2cb26756563f1eed69df3cf68e71d031be891357674eaf59cfebb934295097930632e49311860f59c06233b88ffd20bef81e8beb9b29b4a55c07fa9060b7c2c4a7e3ce36cd9597cab1d12168377de7eb69d5d9387c35176588754ffbbdd52e89b57783bdff6a9dc1858229393ca464bde7dbf5dafebb2a60d4d18522e40199cd5e9c0330c4e6a2931db728cf311a9d453af51c87df2fc5274a7186d94d5a58c650405fea3d387db2584115ecc07f523e3930f0d67a0226e9b477affeab21357e497a06fb7d2097b6224f812f8f667c93e048fd3a75f172fafc2bed1ceb1bd9bc63d9c7b8ff972641a97d702f021e34ea55dca88b41f4e41133e7985b5267a0ad0952cb0865fbf0e47a34f940de846750948cf6b6854ac149c5b2dd938fc524e1d48e5e7e4f527022046a5a23bd189591022b77cd9730a65d45f6fc1e3907c23374a54e67c684e43c0fcf0c1ed122a7c40171cff96a415513c0f7b6814c2ac3762ad7c126a3d5a6d99d74dcd2e32983ab4f137e06dc75d0906e000421106e697017ca995d72fa231ded53d90c22caef4adcfd8afaa7988a209cda563cbf2a583f942112d10f281c24ee700db7d1ef1adf0a592419162b593ca4174f3b284696f3392765a4b9717b77a77d26f2553f0b4aab441143703ef46bc66715c3705f287455f466fcd470a96d918ce6ba35444cb547097c83287609da64cf2214ef0feee921377d2614834bdce56bcbb40b52d64c6b97eecd67792797ebcfcea1d4a8ba6742bc1ee9ec8bc94833dc11a842811e9921e72549a872a539c649aafcf0847bcb300dedb11c501cbb9c3406821b22064830d98ab4f6e316f1949620fc0371d196d6bb9ce2b3257fc8382da6642918c388401460f91b8a6ac4de5ed0d57046bcbe880708aff14db3df488d04eeb0697e94b88ad470f741a1ad7ffb6651b7ac9f49cfe2b800160b101313d831355c7a560510da5b63079830753612c42dc7d2e23e3f397c88f796a5334abb0e0b444d88f33acc983e00e4adc806036fda6f593ff6d6040f585e0db07d9e14ab0c26a5ac0a9dceed8276fbb9d43b7469787ca912b2ba696ece5bff020a148dd69fc8c9bd44dc3b2daa40ae6f3254b71e24099d95da04682d23832d1c9040bfe90b9a2aaecce26a2996d0af462e62dd2ed545fdf2402bdfee6c50b9fe41bdfc16cc5eb905547fd8506df59ce9307073db86fa1863d673506b85c42b2799dbbc7865eca7bcbcae9cb90dd74b0d806d0db9294d74a4c38006a84679074f791ac82e053a9715e9bfb3ef9c7649e9e490e3d17406b0cac6a1736629a1d4aee26154d363b5a959fd6cc48ba2b95754fd01a3a6079724bed73b20ea3a454de36f251497fe789e217d4ec6e1d187935460e079a7d62699bb6f9a380051a33570da2aca0889ac5e3057e370183f5b793b5805b8861ffb7a1c69687ca9c42aa1b142d77c4aa0308b538c6d4545e7f2911f38efaafe44982498e9d8a9df745981e2dfec13e0d3924725ee657d099b976407fcf65d1e0b7209838973d310448cc6d07e3f1047b206da98ef42547f285d91cbfc0e5127cc6130f4d0182a1c8b3e509236f44964f66859219b063e7733991358594f7d805111a4c046c8817a100b3bbb95224ab4702d525cae57afd9523be3a867e5f5ccd44c261358bcfd51256d9c8203a40235dde993974dd72ed6efc748a89fb2b016d0a544872d290a5ab3b54f3870a7e13185288538a587711c23e8756abb9f3e00effd6dc6d29dee174958823b9cc0d907cb6ccfb4d047d93e0a80ecb259fbef48062d2388ddb00adcc654d921a51efd401f509a6c6d0127586e311b8cc14e3957360edb8816d74c58cb3ff1b9acc428ce20c9946e5ee77eff83db947110388a9086f57d74cabe8</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>日记2020-10-14</title>
    <link href="/2020/10/14/%E6%97%A5%E8%AE%B02020-10-14/"/>
    <url>/2020/10/14/%E6%97%A5%E8%AE%B02020-10-14/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误，请不要再试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码方可查看</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="a738354086b93d14e0add98da24900c7c7b929aa264e8333b586a29e963c4156">886b00afb18a6c2bbaddebe7437c38fd04d79a609bf197c2cfb7a12f733717b88e7a51d4225e02880b8d0225743e77c9fd47ba25b493d16b9182cd972d5de4c49247464866804202cc0ff290527727940d7654c8cf34ad1398ee0110ff4271aa78a433003f7c75b9197ea1894e9d5fea19afaa8cb19fa1f7eddff1be279bd128f8aceeedc635389caa6868e557cf9e61703a2c21e8f3cfe9403c01c43e5a69f8b5a05f50a2ebf5cab5e77886de43f9c7c0c42155c9288de4fd3527ae1cf68bc353e7ebe6167c8a5456a92617e5280a0cbfd34437399e6c79c5b4a4de730263d278b8bf73ed67e35c629d3755106a26d03af870991f4f62d9cc852e65a8648099a2a815cbce8f131da28daa2e511d10f507c51aa1a672aae7dd807e2ce9d88b7d722b223c93b6643fbc1374549b3ea09c53bbdd18613a859a72e174d4855eaf0e559350f5038823303e6416c3b4a4cf06319404e5943d2110a91007f7cb8da08d757b4168e860d1bfc234b3b051ecc66bc0be6082cbc5be6faa63aeb7940bd58460f298c085077040b9849ee56ea1c2f1da32426c146cd3fae08b63ccd5d86bf7b2f406718e476bf7e3a4a7e1734a6277e622f8ff262103dd04c91b98a92d32a1354afd4ac7c3d748bed30a5e620d54f1ef41ebbce968b241337598f2a520fa1f7228736f1c0860de80900e5cd39f4e1f7a55ecdb7afa08ff3a4ede66775264904a7b446350169cccb05b465ac3ead11ef4f1addf17b21229840726f192a1c965cc1ba3329269d764f3b9839997de3153938c4a7c6a0a3b3792d26f72b1fea35cdf176b16d7e394c9b665ae49704965c8110bd85a12f2dc0f9a34d0a896540bc8336413972319f3b3dd03e98302e1a42860ae46691ae7b87564d5686ced4a818368775a4d01d5a4d77d29e3d8daa77d78cf292008ed6489079bb6c52ba5ef6e82d50d9a395feeaed5ce35cb074c1de8e007f33e870d04522d699d5bf6a0bc8c0fdc9fc7527a038432201b43b237cc59678c16aa8cadc3fbdb4d2b203cc1f563d40b518699c3858a5eaf697248f17f53c688440588c003fcf37c04736cdcb3bd08d3713a24c246223beea0d976df66788874aa3c5d27efd7694aadddb7867759b3493606c7b62650b8291729eaddf3f6a2808a2d870a812a0011d6c32e8c65adb3a9bce6905360951b24f92c99fba5934115a662ffffd19730379ba26c3f8211ec4b581027f15a2e1a357408a415e3e78b19dea70c4950277f7e40b79b3baf059a7510fef5d8244394fd360b962b8981cef7f172c6d1bce0802b928f912760c157b6ba8be30a5a6a18dbaa4068fb05ee3c4dc3ca98d5c5d4d30c9946917c595598443798cbe519e029ab42d0604755775e4606f55597d1fa8f9b409280c6ea7d0b4200da7cda1e7a1c56246f4477e72ae06a67f5129a7f2de9b522bec6ca0d3df7fab927759af4efec337cf0ca9561a62ac9054856fbbf1a7a70dcd5f2f6aac715f29c831bf5fa28e16057163a95896b58c519bd82d24f71cc12583c1d93056416f36148827332e5e4b6cf8dd479829e35d38f49107fc0e5fba247c867dbc4d20c5f077d363f53ebfcde9a1d074384b1fbbe236c688b56a13c840259722b5da809cfc6e38ff56e9c828793119ddd755e88d21bac57a89161666a81f2688f1664d55314b7fb46ab5afecfeabdefbe63ae9d89a010e6b22a4c541f251e86829e7ba6e534d76dc976326e75ecdc1cebe7bfc6f8120e5cf425e791b6b96f793575285c7acbe31506fae15d83889c8409e13be193fa65bf2d6d40de7674451ac0d47b3debf525f2d55c9572ea2bc09f7fd262b95820911c01596e53f04954281e8e6dfd51ec27170a3e6ac0dc0ec83685edd67ac774734470f882e915c7f29df55cceec5c12af070bde858e6d809d8353ba980a13c8bc046dd36ae3e3524b162e3f3c7bd8a6e5265f206ff98d0b8505abf635ae004dd52bcb9fc47649a42d83f6996949613f6af6c19f44bf352081517474696c46f9820f498ee5ee696c889b9067fee6d676ce736d912b0c59ebaf46f594b76a65827ad70e646a08a78023abab81fbcbad7a698bfaf98bf86a18f3bee8680cb01de3bedb55ced76c1aff26a3a073d144e8cd89457f6852fdc87a4d0c5bc493194d880ef19ecdab42214e97dc2e9a1ffdc6172837c8bd191afc2cd777be7946d43d5b83143c48425fe5b9bc071c77eb9400833a6aef650e3f50549ce155eebfccd5609b9d3f0e57c7c6125d2278fd7df9</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>日记2020-10-13</title>
    <link href="/2020/10/13/%E6%97%A5%E8%AE%B02020-10-13/"/>
    <url>/2020/10/13/%E6%97%A5%E8%AE%B02020-10-13/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误，请不要再试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码方可查看</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e8c1b4bc763c3b82d8f92913bed17c8013b5c606649dffcc24186569582370fd">2d09a5b7e317527810d5e863e73ea76da72fe7abf6bf1a2d7cf2c982fee33538e8541f022f72e3ec9ea0ceea578fda94972d486f7f70d9dcf1496e36b0423d9b90bc0384a9fca012d9670dc3f5b6860f2d2f62c683d555cfd36eecd542462853b50b2b230a6242edb20cc6bfea91d37b9f171ce2adde1036641dc6de7a3c64b6e8fa5a9c56caa1e3f1a4eb952270e73ad7298ebe50c83b0c8e07207c0098859460672bad98043f56aaa266e8ce1b257b0770b76da6f0535ea9bb7fae22464e3877661187c88830dd43d2c335c95a01fb80aebff356f1dfb9123b11b4bad40c6a61d780318bae632d2c5776e10861001378d704efaaf5138b9b2b2e5d02dff9d9e19ec7c107080955ea23b5ce6afd4af745101c5896e94497c85cee5edd9bf869c1e442b66ee0885c4abda0a2c20a82f8055776e3440aa9936305d78168a15e62bb36ff846964df29386b37cf1e96f499f032d1ffbfb7ca079f1717059c5b627c8be2267f9095e5e670b898b36792961de65da7b82a194c4801e9a33d0528330b</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Electron场景问题记录</title>
    <link href="/2020/10/12/Electron%E5%9C%BA%E6%99%AF%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/10/12/Electron%E5%9C%BA%E6%99%AF%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>记录electron-vue的使用<br><a id="more"></a></p><h2 id="下载模板"><a href="#下载模板" class="headerlink" title="下载模板"></a>下载模板</h2><pre><code># Install vue-cli and scaffold boilerplatenpm install -g vue-clivue init simulatedgreg/electron-vue my-project# Install dependencies and run your appcd my-projectyarn # or npm installyarn run dev # or npm run dev</code></pre><p>最好更新下版本</p><pre><code>&quot;electron&quot;: &quot;^4.2.5&quot;&quot;electron-builder&quot;: &quot;^21.2.0&quot;</code></pre><h2 id="打包配置"><a href="#打包配置" class="headerlink" title="打包配置"></a>打包配置</h2><h3 id="pack内容"><a href="#pack内容" class="headerlink" title="pack内容"></a>pack内容</h3><pre><code>...&quot;build&quot;: {&quot;productName&quot;: &quot;MQTT调试工具&quot;,&quot;appId&quot;: &quot;com.codergu.fymqtt&quot;,&quot;directories&quot;: {    &quot;output&quot;: &quot;build&quot;},&quot;nsis&quot;: { //windows打包配置    &quot;oneClick&quot;: false, //一键安装    &quot;allowElevation&quot;: true, // 允许请求提升。 如果为false，则用户必须使用提升的权限重新启动安装程序。    &quot;allowToChangeInstallationDirectory&quot;: true, // 允许修改安装目录    &quot;installerIcon&quot;: &quot;build/icons/icon_win.ico&quot;, // 安装图标    &quot;uninstallerIcon&quot;: &quot;build/icons/icon_win.ico&quot;, // 卸载图标    &quot;installerHeaderIcon&quot;: &quot;build/icons/icon_win.ico&quot;, // 安装时头部图标    &quot;createDesktopShortcut&quot;: true, // 创建桌面图标    &quot;createStartMenuShortcut&quot;: true, // 创建开始菜单图标    &quot;shortcutName&quot;: &quot;MQTT调试工具&quot;, // 图标名称    &quot;include&quot;: &quot;build/script/installer.nsh&quot;  // 包含的自定义nsis脚本},&quot;files&quot;: [    &quot;dist/electron/**/*&quot;],&quot;dmg&quot;: {    &quot;contents&quot;: [    {        &quot;x&quot;: 410,        &quot;y&quot;: 150,        &quot;type&quot;: &quot;link&quot;,        &quot;path&quot;: &quot;/Applications&quot;    },    {        &quot;x&quot;: 130,        &quot;y&quot;: 150,        &quot;type&quot;: &quot;file&quot;    }    ]},&quot;mac&quot;: {    &quot;icon&quot;: &quot;build/icons/icon_mac.icns&quot;},&quot;win&quot;: {    &quot;icon&quot;: &quot;build/icons/icon_win.ico&quot;,    &quot;target&quot;: [        {            &quot;target&quot;: &quot;nsis&quot;,            &quot;arch&quot;: [                //&quot;x64&quot;, 打包成64位                &quot;ia32&quot;            ]        }    ]},&quot;linux&quot;: {    &quot;icon&quot;: &quot;build/icons&quot;}...</code></pre><h3 id="nsh内容"><a href="#nsh内容" class="headerlink" title="nsh内容"></a>nsh内容</h3><p>主要设置软件安装默认的路径</p><pre><code>; Script generated by the HM NIS Edit Script Wizard.; HM NIS Edit Wizard helper defines custom install default dir!macro preInit    SetRegView 64    WriteRegExpandStr HKLM &quot;${INSTALL_REGISTRY_KEY}&quot; InstallLocation &quot;C:\mqtt-tool&quot;    WriteRegExpandStr HKCU &quot;${INSTALL_REGISTRY_KEY}&quot; InstallLocation &quot;C:\mqtt-tool&quot;    SetRegView 32    WriteRegExpandStr HKLM &quot;${INSTALL_REGISTRY_KEY}&quot; InstallLocation &quot;C:\mqtt-tool&quot;    WriteRegExpandStr HKCU &quot;${INSTALL_REGISTRY_KEY}&quot; InstallLocation &quot;C:\mqtt-tool&quot;!macroend</code></pre><h2 id="常见问题及注意点"><a href="#常见问题及注意点" class="headerlink" title="常见问题及注意点"></a>常见问题及注意点</h2><h3 id="Webpack-ReferenceError-process-is-not-defined"><a href="#Webpack-ReferenceError-process-is-not-defined" class="headerlink" title="Webpack ReferenceError: process is not defined"></a>Webpack ReferenceError: process is not defined</h3><p>在 <strong>.electron-vue</strong> 下面的 <strong>webpack.renderer.config.js</strong> 和 <strong>webpack.web.config.js</strong> 修改为如下</p><pre><code>new HtmlWebpackPlugin({      filename: &#39;index.html&#39;,      template: path.resolve(__dirname, &#39;../src/index.ejs&#39;),      //*********以下为添加内容*********      templateParameters(compilation, assets, options) {        return {          compilation: compilation,          webpack: compilation.getStats().toJson(),          webpackConfig: compilation.options,          htmlWebpackPlugin: {            files: assets,            options: options          },          process,        };      },      //*********以上为添加内容*********      minify: {        collapseWhitespace: true,        removeAttributeQuotes: true,        removeComments: true      },      nodeModules: process.env.NODE_ENV !== &#39;production&#39;        ? path.resolve(__dirname, &#39;../node_modules&#39;)        : false    }),</code></pre><h3 id="图标大小要正确"><a href="#图标大小要正确" class="headerlink" title="图标大小要正确"></a>图标大小要正确</h3><p>windows的ico大小不是256*256将无法打包成功</p><h3 id="windows和mac-os环境的node版本尽量保持一致"><a href="#windows和mac-os环境的node版本尽量保持一致" class="headerlink" title="windows和mac os环境的node版本尽量保持一致"></a>windows和mac os环境的node版本尽量保持一致</h3><h3 id="macos图标icns制作"><a href="#macos图标icns制作" class="headerlink" title="macos图标icns制作"></a>macos图标icns制作</h3><ol><li>在桌面创建一个文件夹，如icon</li><li>将源图片命名为pic.png，放在icon文件夹</li><li>使用命令在该文件夹下创建临时图片，mkdir tmp.iconset</li><li>在当前文件夹执行以下命令<pre><code>sips -z 16 16     pic.png --out tmp.iconset/icon_16x16.pngsips -z 32 32     pic.png --out tmp.iconset/icon_16x16@2x.pngsips -z 32 32     pic.png --out tmp.iconset/icon_32x32.pngsips -z 64 64     pic.png --out tmp.iconset/icon_32x32@2x.pngsips -z 128 128   pic.png --out tmp.iconset/icon_128x128.pngsips -z 256 256   pic.png --out tmp.iconset/icon_128x128@2x.pngsips -z 256 256   pic.png --out tmp.iconset/icon_256x256.pngsips -z 512 512   pic.png --out tmp.iconset/icon_256x256@2x.pngsips -z 512 512   pic.png --out tmp.iconset/icon_512x512.pngsips -z 1024 1024   pic.png --out tmp.iconset/icon_512x512@2x.png</code></pre></li><li>执行以下命令完成创建<pre><code>iconutil -c icns tmp.iconset -o pic.icns</code></pre></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="https://juejin.im/post/6844903693683261453" target="_blank" rel="noopener">https://juejin.im/post/6844903693683261453</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Electron</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>百度TSDB简单记录-NodeJs</title>
    <link href="/2020/08/10/%E7%99%BE%E5%BA%A6TSDB%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95-NodeJs/"/>
    <url>/2020/08/10/%E7%99%BE%E5%BA%A6TSDB%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95-NodeJs/</url>
    
    <content type="html"><![CDATA[<p>百度时序数据库NodeJs使用说明<br><a id="more"></a></p><blockquote><p><a href="https://cloud.baidu.com/doc/TSDB/s/7k0gi8ytb" target="_blank" rel="noopener">https://cloud.baidu.com/doc/TSDB/s/7k0gi8ytb</a></p></blockquote><h2 id="名称说明"><a href="#名称说明" class="headerlink" title="名称说明"></a>名称说明</h2><ol><li><p>度量（metric）</p><p>度量可以理解为数据库的表名</p></li><li><p>域（field）</p><p>域就是表中的字段（如一个传感器设备的温度、湿度等）</p></li><li><p>标签（tag）</p><p> 标签是表的主要字段（如一个传感器设备的序列号）</p></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>npm install @baiducloud/sdk</code></pre><ul><li>简单使用</li></ul><pre><code>import {TsdbDataClient} from &#39;@baiducloud/sdk&#39;;  // 需要使用babel转义为 require关键字// 或者使用 var TsdbDataClient = require(&#39;@baiducloud/sdk&#39;).TsdbDataClient;const config = {    endpoint: &lt;Endpoint&gt;,                  // 用户的时序数据库域名，形式如 http://{databaseName}.tsdb.iot.gz.baidubce.com    credentials: {        ak: &lt;AccessKeyID&gt;,                //您的AccessKey        sk: &lt;SecretAccessKey&gt;              //您的SecretAccessKey    }};let client = new TsdbDataClient(config);client.getMetrics()                             // 调用所需要的的接口    .then(response =&gt; console.log(response))    // 成功    .catch(error =&gt; console.error(error));      // 失败</code></pre><ul><li>多域查询</li></ul><pre><code>// 构建想要查询的queryListvar queryList = [    {        &quot;metric&quot;: &quot;cpu_idle3&quot;,        &quot;fields&quot;: [ //结果中显示的域，要查哪些写哪些            &quot;field1&quot;,            &quot;field2&quot;        ],        &quot;tags&quot;: [ //结果中显示的tags,和域是一个数组，排列在域后面            &quot;rack&quot;,            &quot;host&quot;        ],        &quot;filters&quot;: { //过滤条件            &quot;start&quot;: &quot;5 hour ago&quot;, //开始于什么时间，也可以使用绝对时间戳            &quot;fields&quot;: [ //根据字段过滤                {                    &quot;field&quot;: &quot;field1&quot;,                    &quot;value&quot;: &quot;&gt;= 10&quot;                },                {                    &quot;field&quot;: &quot;field2&quot;,                    &quot;value&quot;: &quot;&lt;= 10&quot;                }            ],            &quot;tags&quot;: { //根据tag过滤，查询哪些tags的内容                &quot;rack&quot;: [                    &quot;rack1&quot;                ],                &quot;host&quot;: [                    &quot;server1&quot;                ]            },        },        &quot;groupBy&quot;: [//按tag进行分组            {                &quot;name&quot;: &quot;Tag&quot;,                &quot;tags&quot;: [                    &quot;rack&quot;,                    &quot;host&quot;                ]            }        ],        &quot;aggregators&quot;: [{ //聚合函数            &quot;name&quot;: &quot;Sum&quot;,//聚合函数类型            &quot;sampling&quot;: &quot;10 minutes&quot; //时间长度        }],          &quot;limit&quot;: 1000//限制查询的数量    }];// 获取并打印查询结果client.getDatapoints(&lt;queryList&gt;)    .then(response =&gt; console.log(JSON.stringify(response.body)))           // 获取成功    .catch(error =&gt; console.error(error)); </code></pre>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NodeJs</tag>
      
      <tag>TSDB</tag>
      
      <tag>百度</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔2020-07-17</title>
    <link href="/2020/07/17/%E9%9A%8F%E7%AC%942020-07-17/"/>
    <url>/2020/07/17/%E9%9A%8F%E7%AC%942020-07-17/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误，请不要再试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码方可查看</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="69cf64e75cd90b2a7a3d0e67f314cc06e5c7128d23dfd28395cddd1860cb6874">0c1557e35bc1d10c38645157c1abbbc17374ebdf389fe8aad0fae6e81d7e301cf793694ddd14c68e2aa5aa5c6235a5ac8a330bdaf0be5f675a5360c329d2902f6002e1bd2dda395a57b79d80413f2723be3360cab8eefee5fe84fa798a57926806d368baa884ef902a1b6801570b68126402622fe4bf4a7fa85b41bacf0cb8d5b413d1fca0e2ea5aa200e5a83cfe0a97deb391cee160e7e65918e4c29f5336b7d89b036551e2d00f8a20d40ef5e27227830a6f6e0733031430a19a89b777f5e9a0ba70ba0fefa7134c62395796f3e8c038019505609949180b66ff78b3b6bee90465b9558791973ae0e6d802404ff423add96e8bf4da3ada8ed6e3f112e003211d0b01d8c17131c1fdd824f7a55f9e30365a0613f429fda72fc2c6704e6fac9209313e447e580f8198d22f3458ee4458565de61ccc7d16bcf6c5882ba2882cc8a0395847339ea5268887dab1e818c3d2</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>转正</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySql常用命令</title>
    <link href="/2020/07/15/MySql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/07/15/MySql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="添加一列"><a href="#添加一列" class="headerlink" title="添加一列"></a>添加一列</h2><a id="more"></a><h3 id="最简单的添加"><a href="#最简单的添加" class="headerlink" title="最简单的添加"></a>最简单的添加</h3><pre><code>ALTER ... ADD COLUMN...</code></pre><h3 id="在表的最后一列添加新的一项"><a href="#在表的最后一列添加新的一项" class="headerlink" title="在表的最后一列添加新的一项"></a>在表的最后一列添加新的一项</h3><pre><code>ALTER TABLE `tbname` ADD COLUMN `state` TINYINT(2) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;0为添加1为编辑&#39; </code></pre><h3 id="在指定的位置添加新的一列"><a href="#在指定的位置添加新的一列" class="headerlink" title="在指定的位置添加新的一列"></a>在指定的位置添加新的一列</h3><pre><code>ALTER TABLE `tbname`ADD COLUMN `state` TINYINT(2) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;0为添加1为编辑&#39; AFTER `column_name`;</code></pre><h3 id="在第一列添加新的一列"><a href="#在第一列添加新的一列" class="headerlink" title="在第一列添加新的一列"></a>在第一列添加新的一列</h3><pre><code>ALTER TABLE `tbname` ADD COLUMN `state` TINYINT(2) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;0为添加1为编辑&#39; FIRST;</code></pre>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mosuitto常用命令</title>
    <link href="/2020/07/15/Mosuito%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/07/15/Mosuito%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="查看mosquitto的进程"><a href="#查看mosquitto的进程" class="headerlink" title="查看mosquitto的进程"></a>查看mosquitto的进程</h3><a id="more"></a><pre><code>ps -aux | grep mosquitto</code></pre><h3 id="杀掉进程"><a href="#杀掉进程" class="headerlink" title="杀掉进程"></a>杀掉进程</h3><pre><code>kill -9 18248</code></pre><h3 id="启动mosquitto"><a href="#启动mosquitto" class="headerlink" title="启动mosquitto"></a>启动mosquitto</h3><pre><code>mosquitto -c /etc/mosquitto/mosquitto.conf -d</code></pre>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mosquitto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>更改Bootstrap导航栏颜色</title>
    <link href="/2020/07/15/%E6%9B%B4%E6%94%B9Bootstrap%E5%AF%BC%E8%88%AA%E6%A0%8F%E9%A2%9C%E8%89%B2/"/>
    <url>/2020/07/15/%E6%9B%B4%E6%94%B9Bootstrap%E5%AF%BC%E8%88%AA%E6%A0%8F%E9%A2%9C%E8%89%B2/</url>
    
    <content type="html"><![CDATA[<p>更改方式如下<br><a id="more"></a></p><pre><code>.navbar-custom {    background-color:#28323C;//导航条背景色    color:#ffffff;    border-radius:0;}.navbar-custom .navbar-nav &gt; li &gt; a {    color:#fff;}.navbar-custom .navbar-nav &gt; .active &gt; a {    color: #ffffff;    background-color:transparent;//选中的颜色}.navbar-custom .navbar-nav &gt; li &gt; a:hover,.navbar-custom .navbar-nav &gt; li &gt; a:focus,.navbar-custom .navbar-nav &gt; .active &gt; a:hover,.navbar-custom .navbar-nav &gt; .active &gt; a:focus,.navbar-custom .navbar-nav &gt; .open &gt;a {    text-decoration: none;    background-color: #e74c3c;//hover的颜色}.navbar-custom .navbar-brand {    color:#eeeeee;}.navbar-custom .navbar-toggle {    background-color:#eeeeee;}.navbar-custom .icon-bar {    background-color:#28323C;}</code></pre>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bootstrap</tag>
      
      <tag>导航栏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RxJava2教程</title>
    <link href="/2020/07/15/RxJava2%E6%95%99%E7%A8%8B/"/>
    <url>/2020/07/15/RxJava2%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="RxJava2教程"><a href="#RxJava2教程" class="headerlink" title="RxJava2教程"></a>RxJava2教程</h1><a id="more"></a><blockquote><p><a href="https://juejin.im/post/5d983726f265da5b7a753cb7" target="_blank" rel="noopener">https://juejin.im/post/5d983726f265da5b7a753cb7</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在很久之前就一直想整理一下rxjava，但是一直没有时间，最近是因为离职了，总算有时间整理一下了。因为打算每篇博客都记录一个框架。所以为了描述清楚，本篇博客可能略长（包含rxjava的简介，使用，背压，原理等），希望你们能认真的读完，收获肯定还是有的，也会采用大量的图来介绍，这样可以加深理解。也可以当一个工具博客，需要的使用的话随时查阅。</p><p>后续还会继续出背压和原理篇，敬请期待</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>什么是rxjava？ 是一种事件驱动的基于异步数据流的编程模式，整个数据流就像一条河流，它可以被观测（监听），过滤，操控或者与其他数据流合并为一条新的数据流。</p><p>三要素</p><ol><li><p>被观察者（Observable）</p></li><li><p>观察者（Observer）</p></li><li><p>订阅（subscribe）</p></li></ol><p>好了，因为秉持着要有图的思想，在介绍rxjava各个操作符的时候，会采用大量的图示来表示，图示来源于官方，这里先给大家介绍一下怎么看。<br>ok，进入到撸码环节</p><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><h2 id="首先要在-build-gradle-文件中添加依赖"><a href="#首先要在-build-gradle-文件中添加依赖" class="headerlink" title="首先要在 build.gradle 文件中添加依赖"></a>首先要在 build.gradle 文件中添加依赖</h2><pre><code>implementation &#39;io.reactivex.rxjava2:rxjava:2.1.4&#39;implementation &#39;io.reactivex.rxjava2:rxandroid:2.0.2&#39;</code></pre><h2 id="依赖搭建完毕了，我们先写个最简单的案例，一共3步走"><a href="#依赖搭建完毕了，我们先写个最简单的案例，一共3步走" class="headerlink" title="依赖搭建完毕了，我们先写个最简单的案例，一共3步走"></a>依赖搭建完毕了，我们先写个最简单的案例，一共3步走</h2><h3 id="创建被观察者"><a href="#创建被观察者" class="headerlink" title="创建被观察者"></a>创建被观察者</h3><pre><code>   // 创建被观察者   Observable.create(new ObservableOnSubscribe&lt;String&gt;() {       @Override       public void subscribe(ObservableEmitter&lt;String&gt; emitter) throws Exception {            emitter.onNext(&quot;你好呀&quot;);            emitter.onNext(&quot;我爱中国&quot;);            emitter.onNext(&quot;祝愿祖国繁荣富强&quot;);            emitter.onComplete();        }   });</code></pre><h3 id="创建观察者"><a href="#创建观察者" class="headerlink" title="创建观察者"></a>创建观察者</h3><pre><code>   // 创建观察者   Observer observer = new Observer&lt;String&gt;(){       @Override       public void onSubscribe(Disposable d) {           Log.i(&quot;lybj&quot;, &quot;准备监听&quot;);       }       @Override       public void onNext(String s) {           Log.i(&quot;lybj&quot;, s);       }       @Override       public void onError(Throwable e) {           Log.i(&quot;lybj&quot;, &quot;error&quot;);       }       @Override       public void onComplete() {           Log.i(&quot;lybj&quot;, &quot;监听完毕&quot;);       }   };</code></pre><h3 id="订阅（也就是将被观察者和观察者关联）"><a href="#订阅（也就是将被观察者和观察者关联）" class="headerlink" title="订阅（也就是将被观察者和观察者关联）"></a>订阅（也就是将被观察者和观察者关联）</h3><pre><code>   // 订阅   observable.subscribe(observer);</code></pre><p>这就完事了，看下结果</p><p>是不是很简单，几个概念再介绍一下</p><p>onNext()：当被观察者(observable)通过调用onNext()发射数据的时候，观察者(observer)调用onNext()接收数据<br>onError()：当被观察者(observable)调用该函数时，观察者(observer)调用onError()，其他事件将不会继续发送<br>onComplete()：当被观察者(observable)调用该函数时，观察者(observer)调用onComplete()，其他事件将不会继续发送<br>其实rxjava，打个比方，就类似花洒的头，数据流就类似水流，它的被观察者（observable）的各种操作符就是花洒的那个头，可以有各种模式，比如中间喷水的，周围喷水的，喷水雾的等等。根据操作符的不同，可以改变数据的各种样式，根据花洒头的不同，可以把水流改成各种样式。 接下来，就来学习下observable的丰富的操作符。</p><h1 id="创建操作符"><a href="#创建操作符" class="headerlink" title="创建操作符"></a>创建操作符</h1><h2 id="create"><a href="#create" class="headerlink" title="create()"></a>create()</h2><h3 id="做啥的？"><a href="#做啥的？" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>创建被观察者对象</p><h3 id="如何用"><a href="#如何用" class="headerlink" title="如何用?"></a>如何用?</h3><pre><code>// 创建被观察者Observable.create(new ObservableOnSubscribe&lt;String&gt;() {            @Override            public void subscribe(ObservableEmitter&lt;String&gt; emitter) throws Exception {                emitter.onNext(&quot;你好呀&quot;);                emitter.onNext(&quot;我爱中国&quot;);                emitter.onNext(&quot;祝愿祖国繁荣富强&quot;);                emitter.onComplete();            }        }).subscribe(new Observer&lt;String&gt;(){ // 关联观察者            @Override            public void onSubscribe(Disposable d) {                Log.i(&quot;lybj&quot;, &quot;准备监听&quot;);            }            @Override            public void onNext(String s) {                Log.i(&quot;lybj&quot;, s);            }            @Override            public void onError(Throwable e) {                Log.i(&quot;lybj&quot;, &quot;error&quot;);            }            @Override            public void onComplete() {                Log.i(&quot;lybj&quot;, &quot;监听完毕&quot;);            }        });</code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>可以直接链式调用关联观察者</p><h2 id="just"><a href="#just" class="headerlink" title="just()"></a>just()</h2><h3 id="做啥的？-1"><a href="#做啥的？-1" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>通过上面的图，应该很形象的说明了，主要作用就是创建一个被观察者，并发送事件，但是发送的事件不可以超过10个以上。</p><h3 id="如何用-1"><a href="#如何用-1" class="headerlink" title="如何用?"></a>如何用?</h3><pre><code>Observable.just(&quot;小明&quot;, &quot;小红&quot;, &quot;小兰&quot;).subscribe(new Observer&lt;String&gt;() {            @Override            public void onSubscribe(Disposable d) {                Log.i(&quot;lybj&quot;, &quot;准备监听&quot;);            }            @Override            public void onNext(String s) {                Log.i(&quot;lybj&quot;, s+&quot;来了&quot;);            }            @Override            public void onError(Throwable e) {                Log.i(&quot;lybj&quot;, &quot;Error&quot;);            }            @Override            public void onComplete() {                Log.i(&quot;lybj&quot;, &quot;完毕&quot;);            }        });</code></pre><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><h2 id="timer"><a href="#timer" class="headerlink" title="timer()"></a>timer()</h2><h3 id="做啥的？-2"><a href="#做啥的？-2" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>当到指定时间后就会发送一个 0 的值给观察者。 在项目中，可以做一些延时的处理，类似于Handler中的延时</p><h3 id="如何用-2"><a href="#如何用-2" class="headerlink" title="如何用?"></a>如何用?</h3><pre><code>Observable.timer(2, TimeUnit.SECONDS).subscribe(new Consumer&lt;Long&gt;() {        @Override        public void accept(Long aLong) throws Exception {             Log.i(&quot;lybj&quot;, aLong+&quot;&quot;);        }});</code></pre><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>延迟2秒后，将结果发送给观察者，Consumer和Observer是创建观察者的两种写法，相当于观察者中的onNext方法。</p><h2 id="interval"><a href="#interval" class="headerlink" title="interval()"></a>interval()</h2><h3 id="做啥的？-3"><a href="#做啥的？-3" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>每隔一段时间就会发送一个事件，这个事件是从0开始，不断增1的数字。 类似于项目中的timer，做计时器</p><h3 id="如何用-3"><a href="#如何用-3" class="headerlink" title="如何用?"></a>如何用?</h3><pre><code>Observable.interval(3,TimeUnit.SECONDS).subscribe(new Consumer&lt;Long&gt;() {     @Override     public void accept(Long aLong) throws Exception {          Log.i(&quot;lybj&quot;, aLong+&quot;&quot;);     }});</code></pre><h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><h2 id="intervalRange"><a href="#intervalRange" class="headerlink" title="intervalRange()"></a>intervalRange()</h2><h3 id="做啥的？-4"><a href="#做啥的？-4" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>可以指定发送事件的开始值和数量，其他与 interval() 的功能一样。</p><h3 id="如何用-4"><a href="#如何用-4" class="headerlink" title="如何用?"></a>如何用?</h3><pre><code>Observable.intervalRange(100, 4, 0, 10, TimeUnit.SECONDS).subscribe(new Consumer&lt;Long&gt;() {      @Override      public void accept(Long aLong) throws Exception {           Log.i(&quot;lybj&quot;, aLong+&quot;&quot;);      }});</code></pre><h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>参数依次是：开始值，循环执行的次数，初始延迟时间，执行间隔时间，时间单位</p><h2 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h2><h3 id="做啥的？-5"><a href="#做啥的？-5" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>同时发送一定范围的事件序列。</p><h3 id="如何用-5"><a href="#如何用-5" class="headerlink" title="如何用?"></a>如何用?</h3><pre><code>Observable.range(0,10).subscribe(new Consumer&lt;Integer&gt;() {    @Override    public void accept(Integer integer) throws Exception {         Log.i(&quot;lybj&quot;, integer+&quot;&quot;);    }});</code></pre><h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><h2 id="rangeLong"><a href="#rangeLong" class="headerlink" title="rangeLong()"></a>rangeLong()</h2><h3 id="做啥的？-6"><a href="#做啥的？-6" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>作用与 range() 一样，只是数据类型为 Long</p><h3 id="如何用-6"><a href="#如何用-6" class="headerlink" title="如何用?"></a>如何用?</h3><pre><code>Observable.rangeLong(0,10).subscribe(new Consumer&lt;Long&gt;() {    @Override    public void accept(Long aLong) throws Exception {         Log.i(&quot;lybj&quot;, aLong+&quot;&quot;);    }});</code></pre><h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><h2 id="empty-amp-never-amp-error"><a href="#empty-amp-never-amp-error" class="headerlink" title="empty() &amp; never() &amp; error()"></a>empty() &amp; never() &amp; error()</h2><h3 id="做啥的？-7"><a href="#做啥的？-7" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>never()：不发送任何事件<br>error()：发送 onError() 事件<br>empty() ： 直接发送 onComplete() 事件</p><h3 id="如何用-7"><a href="#如何用-7" class="headerlink" title="如何用?"></a>如何用?</h3><pre><code> private void  empty_never_error(){        Observable.empty().subscribe(new Observer(){            @Override            public void onSubscribe(Disposable d) {                Log.i(&quot;lybj&quot;, &quot;准备监听&quot;);            }            @Override            public void onNext(Object o) {                Log.i(&quot;lybj&quot;, o+&quot;&quot;);            }            @Override            public void onError(Throwable e) {                Log.i(&quot;lybj&quot;, &quot;onError&quot;);            }            @Override            public void onComplete() {                Log.i(&quot;lybj&quot;, &quot;onComplete&quot;);            }        });</code></pre><h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><p>如果是empty() 则：</p><p>如果是error() 则：</p><p>如果是never()则：</p><h1 id="转换操作符"><a href="#转换操作符" class="headerlink" title="转换操作符"></a>转换操作符</h1><h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><h3 id="做啥的？-8"><a href="#做啥的？-8" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>map 可以将被观察者发送的数据类型转变成其他的类型</p><h3 id="怎么用？"><a href="#怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.just(&quot;中国&quot;, &quot;祖国&quot;, &quot;中国军人&quot;)                .map(new Function&lt;String, String&gt;() {                    @Override                    public String apply(String s) throws Exception {                        return &quot;我爱&quot; + s;                    }                })                .subscribe(new Consumer&lt;String&gt;() {                    @Override                    public void accept(String s) throws Exception {                        Log.i(&quot;lybj&quot;, s);                    }                });</code></pre><h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><p>简单来讲，就是可以对发射过来的数据进行再加工，再传给观察者</p><h2 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap()"></a>flatMap()</h2><h3 id="做啥的？-9"><a href="#做啥的？-9" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>这个方法可以将事件序列中的元素进行整合加工，返回一个新的被观察者。 flatMap() 其实与 map() 类似，但是 flatMap() 返回的是一个 Observerable，map()只是返回数据，如果在元素再加工的时候，想再使用上面的创建操作符的话，建议使用flatMap()，而非map()。</p><h3 id="怎么用？-1"><a href="#怎么用？-1" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code> Observable.just(&quot;中国&quot;, &quot;祖国&quot;, &quot;中国军人&quot;, &quot;贪官&quot;)                .flatMap(new Function&lt;String, ObservableSource&lt;String&gt;&gt;() {                    @Override                    public ObservableSource&lt;String&gt; apply(String s) throws Exception {                        if(s.equals(&quot;贪官&quot;)){                            return Observable.error(new Exception(&quot;贪官不能被喜欢&quot;));                        }                        return Observable.just(&quot;我爱&quot;+s);                    }                })                .subscribe(new Consumer&lt;String&gt;() {                    @Override                    public void accept(String s) throws Exception {                        Log.i(&quot;lybj&quot;, s);                    }                }, new Consumer&lt;Throwable&gt;() {                    @Override                    public void accept(Throwable throwable) throws Exception {                        Log.i(&quot;lybj&quot;, throwable.getMessage());                    }                });</code></pre><h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p>new Consumer方法监听的是Observable.error()</p><h2 id="concatMap"><a href="#concatMap" class="headerlink" title="concatMap()"></a>concatMap()</h2><h3 id="做啥的？-10"><a href="#做啥的？-10" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>concatMap() 和 flatMap() 基本上是一样的，只不过 concatMap() 转发出来的事件是有序的，而 flatMap() 是无序的。</p><h3 id="怎么用？-2"><a href="#怎么用？-2" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.just(&quot;中国&quot;, &quot;祖国&quot;, &quot;中国军人&quot;, &quot;贪官&quot;)                .concatMap(new Function&lt;String, ObservableSource&lt;String&gt;&gt;() {                    @Override                    public ObservableSource&lt;String&gt; apply(String s) throws Exception {                        if(s.equals(&quot;贪官&quot;)){                            return Observable.error(new Exception(&quot;贪官不能被喜欢&quot;));                        }                        return Observable.just(&quot;我爱&quot;+s);                    }                })                .subscribe(new Consumer&lt;String&gt;() {                    @Override                    public void accept(String s) throws Exception {                        Log.i(&quot;lybj&quot;, s);                    }                }, new Consumer&lt;Throwable&gt;() {                    @Override                    public void accept(Throwable throwable) throws Exception {                        Log.i(&quot;lybj&quot;, throwable.getMessage());                    }                });</code></pre><h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><h2 id="buffer"><a href="#buffer" class="headerlink" title="buffer()"></a>buffer()</h2><h3 id="做啥的？-11"><a href="#做啥的？-11" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>从需要发送的事件当中获取一定数量的事件，并将这些事件放到缓冲区当中一并发出。</p><h3 id="怎么用？-3"><a href="#怎么用？-3" class="headerlink" title="怎么用？"></a>怎么用？</h3><p>buffer 有两个参数，一个是 count，另一个 skip。count 缓冲区元素的数量，skip 就代表缓冲区满了之后，发送下一次事件序列的时候要跳过多少元素。</p><pre><code>Observable.just(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;)                .buffer(2,1)                .subscribe(new Consumer&lt;List&lt;String&gt;&gt;() {                    @Override                    public void accept(List&lt;String&gt; strings) throws Exception {                        Log.d(&quot;lybj&quot;, &quot;缓冲区大小： &quot; + strings.size());                        for (String s : strings){                            Log.d(&quot;lybj&quot;,  s);                        }                    }                });</code></pre><h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><h2 id="scan"><a href="#scan" class="headerlink" title="scan()"></a>scan()</h2><h3 id="做啥的？-12"><a href="#做啥的？-12" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>将发射的数据通过一个函数进行变换，然后将变换后的结果作为参数跟下一个发射的数据一起继续通过那个函数变换，这样依次连续发射得到最终结果。</p><h3 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h3><pre><code>Observable.just(1, 2, 3, 4, 5)                .scan(new BiFunction&lt;Integer, Integer, Integer&gt;() {                    @Override                    public Integer apply(Integer integer, Integer integer2) throws Exception {                        Log.i(&quot;lybj&quot;, &quot;integer01: &quot; + integer + &quot; integer02: &quot;+ integer2);                        return integer + integer2;                    }                }).subscribe(new Consumer&lt;Integer&gt;() {                    @Override                    public void accept(Integer integer) throws Exception {                        Log.i(&quot;lybj&quot;, &quot;accept: &quot; + integer);                    }                });</code></pre><h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p>简单来说，先将第一个元素返回给观察者，然后将1，2的和返给观察者，然后将上一次计算的和，当第一个元素，也就是3，第2个元素，是一直按顺序取值，取第3个元素也就是3，那么将，3+3 =6，返回给观察者，以此类推，将6作为第一个元素，第二个元素取值4，将6+4=10返回给观察者。</p><p>sacn操作符是遍历源Observable产生的结果，再按照自定义规则进行运算，依次输出每次计算后的结果给订阅者</p><h2 id="window"><a href="#window" class="headerlink" title="window()"></a>window()</h2><h3 id="做啥的？-13"><a href="#做啥的？-13" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>发送事件时，将这些事件分为按数量重新分组。window 中的 count 的参数就是代表指定的数量，例如将 count 指定为2，那么每发2个数据就会将这2个数据分成一组。</p><p>window与buffer区别：window是把数据分割成了Observable，buffer是把数据分割成List</p><h3 id="如何用？"><a href="#如何用？" class="headerlink" title="如何用？"></a>如何用？</h3><pre><code>Observable.just(&quot;鲁班&quot;, &quot;孙尚香&quot;, &quot;亚索&quot;,&quot;火女&quot;,&quot;盖伦&quot;)                .window(2)                .subscribe(new Consumer&lt;Observable&lt;String&gt;&gt;() {                    @Override                    public void accept(Observable&lt;String&gt; stringObservable) throws Exception {                        Log.i(&quot;lybj&quot;, &quot;分组开始&quot;);                        stringObservable.subscribe(new Consumer&lt;String&gt;() {                            @Override                            public void accept(String s) throws Exception {                                Log.i(&quot;lybj&quot;, s);                            }                        });                    }                });</code></pre><h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><h1 id="组合操作符"><a href="#组合操作符" class="headerlink" title="组合操作符"></a>组合操作符</h1><h2 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h2><h3 id="做啥的？-14"><a href="#做啥的？-14" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>可以将多个观察者组合在一起，然后按照之前发送顺序发送事件。需要注意的是，concat() 最多只可以发送4个事件。</p><h3 id="怎么用？-4"><a href="#怎么用？-4" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>  private void concat(){        Observable.concat(                Observable.just(1, 2, 3),                Observable.just(4, 5),                Observable.just(6, 7),                Observable.just(8, 9))                .subscribe(new Consumer&lt;Integer&gt;() {                    @Override                    public void accept(Integer integer) throws Exception {                        Log.i(&quot;lybj&quot;, integer+&quot;&quot;);                    }                });    }</code></pre><h3 id="结果-14"><a href="#结果-14" class="headerlink" title="结果"></a>结果</h3><h2 id="concatArray"><a href="#concatArray" class="headerlink" title="concatArray()"></a>concatArray()</h2><h3 id="做啥的？-15"><a href="#做啥的？-15" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>与 concat() 作用一样，不过 concatArray() 可以发送多于 4 个被观察者。</p><h3 id="怎么用？-5"><a href="#怎么用？-5" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.concatArray(Observable.just(1, 2, 3, 4),                Observable.just(5, 6),                Observable.just(7, 8, 9, 10),                Observable.just(11, 12, 13),                Observable.just(14, 15),                Observable.just(16))                .subscribe(new Consumer&lt;Integer&gt;() {            @Override            public void accept(Integer integer) throws Exception {                Log.i(&quot;lybj&quot;, integer+&quot;&quot;);            }        });</code></pre><h3 id="结果-15"><a href="#结果-15" class="headerlink" title="结果"></a>结果</h3><h2 id="merge"><a href="#merge" class="headerlink" title="merge()"></a>merge()</h2><h3 id="做啥的？-16"><a href="#做啥的？-16" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>这个方法与 concat() 作用基本一样，但是 concat() 是串行发送事件，而 merge() 并行发送事件，也是只能发送4个。</p><h3 id="怎么用？-6"><a href="#怎么用？-6" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.merge(Observable.just(1, 2, 3, 4),                Observable.just(5, 6),                Observable.just(7, 8, 9, 10),                Observable.just(11, 12, 13))                .subscribe(new Consumer&lt;Integer&gt;() {                    @Override                    public void accept(Integer integer) throws Exception {                        Log.i(&quot;lybj&quot;, integer+&quot;&quot;);                    }                });</code></pre><h3 id="结果-16"><a href="#结果-16" class="headerlink" title="结果"></a>结果</h3><h2 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h2><h3 id="做啥的？-17"><a href="#做啥的？-17" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>zip操作符用于将多个数据源合并，并生成一个新的数据源。新生成的数据源严格按照合并前的数据源的数据发射顺序，并且新数据源的数据个数等于合并前发射数据个数最少的那个数据源的数据个数。</p><h3 id="怎么用？-7"><a href="#怎么用？-7" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.zip(Observable.just(1, 2, 3),                Observable.just(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;),                new BiFunction&lt;Integer, String, String&gt;(){                    @Override                    public String apply(Integer o1, String o2) throws Exception {                        return o1 +&quot;_&quot;+ o2;                    }                })                .subscribe(new Consumer&lt;String&gt;() {                    @Override                    public void accept(String o) throws Exception {                        Log.i(&quot;lybj&quot;, o);                    }                });</code></pre><h3 id="结果-17"><a href="#结果-17" class="headerlink" title="结果"></a>结果</h3><h2 id="startWith-amp-startWithArray"><a href="#startWith-amp-startWithArray" class="headerlink" title="startWith() &amp; startWithArray()"></a>startWith() &amp; startWithArray()</h2><h3 id="做啥的？-18"><a href="#做啥的？-18" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>在发送事件之前追加事件，startWith() 追加一个事件，startWithArray() 可以追加多个事件。追加的事件会先发出。 </p><h3 id="怎么用？-8"><a href="#怎么用？-8" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.just(1, 2, 3)               .startWithArray(4, 5)               .subscribe(new Consumer&lt;Integer&gt;() {                   @Override                   public void accept(Integer integer) throws Exception {                       Log.i(&quot;lybj&quot;, integer+&quot;&quot;);                   }               });</code></pre><h3 id="结果-18"><a href="#结果-18" class="headerlink" title="结果"></a>结果</h3><h2 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h2><h3 id="做啥的？-19"><a href="#做啥的？-19" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>返回被观察者发送事件的数量。</p><h3 id="怎么用？-9"><a href="#怎么用？-9" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.just(2, 3, 4, 5, 6)                .count()                .subscribe(new Consumer&lt;Long&gt;() {                    @Override                    public void accept(Long aLong) throws Exception {                        Log.i(&quot;lybj&quot;, &quot;事件数量：&quot; + aLong);                    }                });</code></pre><h3 id="结果-19"><a href="#结果-19" class="headerlink" title="结果"></a>结果</h3><h1 id="功能操作符"><a href="#功能操作符" class="headerlink" title="功能操作符"></a>功能操作符</h1><h2 id="delay"><a href="#delay" class="headerlink" title="delay()"></a>delay()</h2><h3 id="做啥的？-20"><a href="#做啥的？-20" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>延迟一段事件发送事件。</p><h3 id="怎么用？-10"><a href="#怎么用？-10" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.just(1,2,3,4)                .delay(3, TimeUnit.SECONDS)                .subscribe(new Consumer&lt;Integer&gt;() {                    @Override                    public void accept(Integer integer) throws Exception {                        Log.i(&quot;lybj&quot;,  integer+&quot;&quot;);                    }                });</code></pre><h3 id="结果-20"><a href="#结果-20" class="headerlink" title="结果"></a>结果</h3><h2 id="周期函数"><a href="#周期函数" class="headerlink" title="周期函数"></a>周期函数</h2><h3 id="做啥的？-21"><a href="#做啥的？-21" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>doOnEach(): 每次发送事件之前都会回调这个方法</p><p>doOnNext(): Observable 每发送 onNext() 之前都会先回调这个方法。</p><p>doAfterNext(): Observable 每发送 onNext() 之后都会回调这个方法。</p><p>doOnComplete(): Observable 每发送 onComplete() 之前都会回调这个方法。</p><p>doOnError(): Observable 每发送 onError() 之前都会回调这个方法。</p><p>doOnSubscribe(): Observable 每发送 onSubscribe()之前都会回调这个方法。</p><p>doOnDispose(): 当调用 Disposable 的 dispose() 之后回调该方法。</p><p>doOnTerminate(): 在 onError 或者 onComplete 发送之前回调。</p><p>doAfterTerminate(): onError 或者 onComplete 发送之后回调。</p><p>doFinally(): 在所有事件发送完毕之后回调该方法。如果取消订阅之后doAfterTerminate()就不会被回调，而doFinally()无论怎么样都会被回调，且都会在事件序列的最后。</p><h3 id="怎么用？-11"><a href="#怎么用？-11" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {            @Override            public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception {                emitter.onNext(1);                emitter.onNext(2);                emitter.onNext(3);                emitter.onComplete();            }        }).doOnEach(new Consumer&lt;Notification&lt;Integer&gt;&gt;() {            @Override            public void accept(Notification&lt;Integer&gt; integerNotification) throws Exception {                Log.i(&quot;lybj&quot;,  &quot;doOnEach 方法执行了, 结果：&quot;+ integerNotification.getValue());            }        }).doOnNext(new Consumer&lt;Integer&gt;() {            @Override            public void accept(Integer integer) throws Exception {                Log.i(&quot;lybj&quot;,  &quot;doOnNext 方法执行了, 结果：&quot;+ integer);            }        }).doAfterNext(new Consumer&lt;Integer&gt;() {            @Override            public void accept(Integer integer) throws Exception {                Log.i(&quot;lybj&quot;,  &quot;doAfterNext 方法执行了, 结果：&quot;+ integer);            }        }).doOnComplete(new Action() {            @Override            public void run() throws Exception {                Log.i(&quot;lybj&quot;,  &quot;doOnComplete 方法执行了&quot;);            }        }).doOnError(new Consumer&lt;Throwable&gt;() {            @Override            public void accept(Throwable throwable) throws Exception {                Log.i(&quot;lybj&quot;,  &quot;doOnError 方法执行了&quot;);            }        }).doOnSubscribe(new Consumer&lt;Disposable&gt;() {            @Override            public void accept(Disposable disposable) throws Exception {                Log.i(&quot;lybj&quot;,  &quot;doOnSubscribe 方法执行了&quot;);            }        }).doOnDispose(new Action() {            @Override            public void run() throws Exception {                Log.i(&quot;lybj&quot;,  &quot;doOnDispose 方法执行了&quot;);            }        }).doOnTerminate(new Action() {            @Override            public void run() throws Exception {                Log.i(&quot;lybj&quot;,  &quot;doOnTerminate 方法执行了&quot;);            }        }).doAfterTerminate(new Action() {            @Override            public void run() throws Exception {                Log.i(&quot;lybj&quot;,  &quot;doAfterTerminate 方法执行了&quot;);            }        }).doFinally(new Action() {            @Override            public void run() throws Exception {                Log.i(&quot;lybj&quot;,  &quot;doFinally 方法执行了&quot;);            }        }).subscribe(new Observer&lt;Integer&gt;() {            private Disposable disposable;            @Override            public void onSubscribe(Disposable d) {                disposable = d;                Log.i(&quot;lybj&quot;, &quot;------观察者onSubscribe()执行&quot;);            }            @Override            public void onNext(Integer integer) {                Log.i(&quot;lybj&quot;, &quot;------观察者onNext()执行：&quot;+integer);                if(integer == 2){//                    disposable.dispose(); // 取消订阅                }            }            @Override            public void onError(Throwable e) {                Log.i(&quot;lybj&quot;, &quot;------观察者onError()执行&quot;);            }            @Override            public void onComplete() {                Log.i(&quot;lybj&quot;, &quot;------观察者onComplete()执行&quot;);            }        });</code></pre><h3 id="结果-21"><a href="#结果-21" class="headerlink" title="结果"></a>结果</h3><h2 id="onErrorReturn"><a href="#onErrorReturn" class="headerlink" title="onErrorReturn()"></a>onErrorReturn()</h2><h3 id="做啥的？-22"><a href="#做啥的？-22" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>当接受到一个 onError() 事件之后回调，返回的值会回调 onNext() 方法，并正常结束该事件序列。</p><h3 id="怎么用？-12"><a href="#怎么用？-12" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.create(new ObservableOnSubscribe&lt;String&gt;() {            @Override            public void subscribe(ObservableEmitter&lt;String&gt; emitter) throws Exception {                emitter.onNext(&quot;小明：到&quot;);                emitter.onError(new IllegalStateException(&quot;error&quot;));                emitter.onNext(&quot;小方：到&quot;);            }        }).onErrorReturn(new Function&lt;Throwable, String&gt;() {            @Override            public String apply(Throwable throwable) throws Exception {                Log.i(&quot;lybj&quot;,  &quot;小红请假了&quot;);                return &quot;小李：到&quot;;            }        }).subscribe(new Observer&lt;String&gt;() {            @Override            public void onSubscribe(Disposable d) {            }            @Override            public void onNext(String s) {                Log.i(&quot;lybj&quot;,  s);            }            @Override            public void onError(Throwable e) {                Log.i(&quot;lybj&quot;,  e.getMessage());            }            @Override            public void onComplete() {            }        });</code></pre><h3 id="结果-22"><a href="#结果-22" class="headerlink" title="结果"></a>结果</h3><h2 id="onErrorResumeNext"><a href="#onErrorResumeNext" class="headerlink" title="onErrorResumeNext()"></a>onErrorResumeNext()</h2><h3 id="做啥的？-23"><a href="#做啥的？-23" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>当接收到 onError() 事件时，返回一个新的 Observable，并正常结束事件序列。</p><h3 id="怎么用？-13"><a href="#怎么用？-13" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.create(new ObservableOnSubscribe&lt;String&gt;() {            @Override            public void subscribe(ObservableEmitter&lt;String&gt; emitter) throws Exception {                emitter.onNext(&quot;小明&quot;);                emitter.onNext(&quot;小方&quot;);                emitter.onNext(&quot;小红&quot;);                emitter.onError(new NullPointerException(&quot;error&quot;));            }        }).onErrorResumeNext(new Function&lt;Throwable, ObservableSource&lt;? extends String&gt;&gt;() {            @Override            public ObservableSource&lt;? extends String&gt; apply(Throwable throwable) throws Exception {                return Observable.just(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);            }        }).subscribe(new Observer&lt;String&gt;() {            @Override            public void onSubscribe(Disposable d) {                Log.i(&quot;lybj&quot;,  &quot;准备监听&quot;);            }            @Override            public void onNext(String s) {                Log.i(&quot;lybj&quot;,  s);            }            @Override            public void onError(Throwable e) {                Log.i(&quot;lybj&quot;,  e.getMessage());            }            @Override            public void onComplete() {                Log.i(&quot;lybj&quot;,  &quot;onComplete&quot;);            }        });</code></pre><h3 id="结果-23"><a href="#结果-23" class="headerlink" title="结果"></a>结果</h3><h2 id="onExceptionResumeNext"><a href="#onExceptionResumeNext" class="headerlink" title="onExceptionResumeNext()"></a>onExceptionResumeNext()</h2><h3 id="做啥的？-24"><a href="#做啥的？-24" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>与 onErrorResumeNext() 作用基本一致，但是这个方法只能捕捉 Exception。</p><h3 id="怎么用？-14"><a href="#怎么用？-14" class="headerlink" title="怎么用？"></a>怎么用？</h3><p>Observable.create(new ObservableOnSubscribe<string>() {</string></p><pre><code>        @Override        public void subscribe(ObservableEmitter&lt;String&gt; emitter) throws Exception {            emitter.onNext(&quot;小明&quot;);            emitter.onNext(&quot;小方&quot;);            emitter.onNext(&quot;小红&quot;);            emitter.onError(new Error(&quot;error&quot;));        }    }).onExceptionResumeNext(new Observable&lt;String&gt;() {        @Override        protected void subscribeActual(Observer observer) {            observer.onNext(&quot;小张&quot;);        }    }).subscribe(new Observer&lt;String&gt;() {        @Override        public void onSubscribe(Disposable d) {            Log.i(&quot;lybj&quot;,  &quot;准备监听&quot;);        }        @Override        public void onNext(String s) {            Log.i(&quot;lybj&quot;,  s);        }        @Override        public void onError(Throwable e) {            Log.i(&quot;lybj&quot;,  e.getMessage());        }        @Override        public void onComplete() {            Log.i(&quot;lybj&quot;,  &quot;onComplete&quot;);        }    });</code></pre><h3 id="结果-24"><a href="#结果-24" class="headerlink" title="结果"></a>结果</h3><h2 id="retry"><a href="#retry" class="headerlink" title="retry()"></a>retry()</h2><h3 id="做啥的？-25"><a href="#做啥的？-25" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>如果出现错误事件，则会重新发送所有事件序列。times 是代表重新发的次数。</p><h3 id="怎么用？-15"><a href="#怎么用？-15" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.create(new ObservableOnSubscribe&lt;String&gt;() {            @Override            public void subscribe(ObservableEmitter&lt;String&gt; emitter) throws Exception {                emitter.onNext(&quot;1&quot;);                emitter.onNext(&quot;2&quot;);                emitter.onError(new IllegalStateException());            }        }).retry(2)          .subscribe(new Observer&lt;String&gt;() {              @Override              public void onSubscribe(Disposable d) {                  Log.i(&quot;lybj&quot;,  &quot;准备监听&quot;);              }              @Override              public void onNext(String s) {                  Log.i(&quot;lybj&quot;,  s);              }              @Override              public void onError(Throwable e) {                  Log.i(&quot;lybj&quot;,  e.getMessage());              }              @Override              public void onComplete() {                  Log.i(&quot;lybj&quot;,  &quot;onComplete&quot;);              }          });</code></pre><h3 id="结果-25"><a href="#结果-25" class="headerlink" title="结果"></a>结果</h3><h2 id="retryUntil"><a href="#retryUntil" class="headerlink" title="retryUntil()"></a>retryUntil()</h2><h3 id="做啥的？-26"><a href="#做啥的？-26" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>出现错误事件之后，可以通过此方法判断是否继续发送事件。</p><h3 id="怎么用？-16"><a href="#怎么用？-16" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.create(new ObservableOnSubscribe&lt;String&gt;() {            public void subscribe(@NonNull ObservableEmitter&lt;String&gt; emitter){                emitter.onNext(&quot;1&quot;);                emitter.onNext(&quot;2&quot;);                emitter.onNext(&quot;3&quot;);                emitter.onError(new NullPointerException(&quot;error&quot;));                emitter.onNext(&quot;4&quot;);                emitter.onNext(&quot;5&quot;);            }        }).retryUntil(new BooleanSupplier() {            @Override            public boolean getAsBoolean() throws Exception {                Log.i(&quot;lybj&quot;,  &quot;getAsBoolean&quot;);                return true;            }        }).subscribe(new Observer&lt;String&gt;() {            @Override            public void onSubscribe(Disposable d) {            }            @Override            public void onNext(String s) {                Log.i(&quot;lybj&quot;,  s);            }            @Override            public void onError(Throwable e) {            }            @Override            public void onComplete() {            }        });</code></pre><h3 id="结果-26"><a href="#结果-26" class="headerlink" title="结果"></a>结果</h3><h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h2><h3 id="做啥的？-27"><a href="#做啥的？-27" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>重复发送被观察者的事件，times 为发送次数。</p><h3 id="怎么用？-17"><a href="#怎么用？-17" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.just(1,2,3)                .repeat(2)                .subscribe(new Consumer&lt;Integer&gt;() {                    @Override                    public void accept(Integer integer) throws Exception {                        Log.i(&quot;lybj&quot;,  integer+&quot;&quot;);                    }                });</code></pre><h3 id="结果-27"><a href="#结果-27" class="headerlink" title="结果"></a>结果</h3><h2 id="subscribeOn-amp-observeOn"><a href="#subscribeOn-amp-observeOn" class="headerlink" title="subscribeOn() &amp; observeOn()"></a>subscribeOn() &amp; observeOn()</h2><h3 id="做啥的？-28"><a href="#做啥的？-28" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>subscribeOn(): 指定被观察者的线程，如果多次调用此方法，只有第一次有效。 observeOn(): 指定观察者的线程</p><h3 id="怎么用？-18"><a href="#怎么用？-18" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.create(new ObservableOnSubscribe&lt;String&gt;() {            public void subscribe(@NonNull ObservableEmitter&lt;String&gt; emitter){                emitter.onNext(&quot;1&quot;);                Log.i(&quot;lybj&quot;,  Thread.currentThread().getName());            }        }).subscribeOn(Schedulers.io())          .observeOn(Schedulers.newThread())          .subscribe(new Consumer&lt;String&gt;() {               @Override               public void accept(String s) throws Exception {                   Log.i(&quot;lybj&quot;,  s);                   Log.i(&quot;lybj&quot;,  Thread.currentThread().getName());               }          });</code></pre><h3 id="结果-28"><a href="#结果-28" class="headerlink" title="结果"></a>结果</h3><h1 id="过滤操作符"><a href="#过滤操作符" class="headerlink" title="过滤操作符"></a>过滤操作符</h1><h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><h3 id="做啥的？-29"><a href="#做啥的？-29" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>如果返回 true 则会发送事件，否则不会发送</p><h3 id="怎么用？-19"><a href="#怎么用？-19" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.just(1,2,3,4,5)          .filter(new Predicate&lt;Integer&gt;() {                    @Override                    public boolean test(Integer integer) throws Exception {                        if(integer &gt; 4){                            return true;                        }                        return false;                    }           }).subscribe(new Consumer&lt;Integer&gt;() {               @Override               public void accept(Integer integer) throws Exception {                   Log.i(&quot;lybj&quot;,  integer+&quot;&quot;);               }          });</code></pre><h3 id="结果-29"><a href="#结果-29" class="headerlink" title="结果"></a>结果</h3><h2 id="ofType"><a href="#ofType" class="headerlink" title="ofType()"></a>ofType()</h2><h3 id="做啥的？-30"><a href="#做啥的？-30" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>可以过滤不符合该类型事件</p><h3 id="怎么用？-20"><a href="#怎么用？-20" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.just(1, 2, 3, &quot;小明&quot;, &quot;小方&quot;)                .ofType(String.class)                .subscribe(new Consumer&lt;String&gt;() {                    @Override                    public void accept(String s) throws Exception {                        Log.i(&quot;lybj&quot;,  s+&quot;&quot;);                    }                });</code></pre><h3 id="结果-30"><a href="#结果-30" class="headerlink" title="结果"></a>结果</h3><h2 id="skip"><a href="#skip" class="headerlink" title="skip()"></a>skip()</h2><h3 id="做啥的？-31"><a href="#做啥的？-31" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>跳过正序某些事件，count 代表跳过事件的数量</p><h3 id="怎么用？-21"><a href="#怎么用？-21" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.just(1,2,3,4,5,6,7)                .skip(2)                .subscribe(new Consumer&lt;Integer&gt;() {                    @Override                    public void accept(Integer integer) throws Exception {                        Log.i(&quot;lybj&quot;,  integer+&quot;&quot;);                    }                });</code></pre><h3 id="结果-31"><a href="#结果-31" class="headerlink" title="结果"></a>结果</h3><h2 id="distinct"><a href="#distinct" class="headerlink" title="distinct()"></a>distinct()</h2><h3 id="做啥的？-32"><a href="#做啥的？-32" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>过滤事件序列中的重复事件。</p><h3 id="做啥的？-33"><a href="#做啥的？-33" class="headerlink" title="做啥的？"></a>做啥的？</h3><pre><code>Observable.just(1,2,3,1,4,1,2)                .distinct()                .subscribe(new Consumer&lt;Integer&gt;() {                    @Override                    public void accept(Integer integer) throws Exception {                        Log.i(&quot;lybj&quot;,  integer+&quot;&quot;);                    }                });</code></pre><h3 id="结果-32"><a href="#结果-32" class="headerlink" title="结果"></a>结果</h3><h2 id="distinctUntilChanged"><a href="#distinctUntilChanged" class="headerlink" title="distinctUntilChanged()"></a>distinctUntilChanged()</h2><h3 id="做啥的？-34"><a href="#做啥的？-34" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>过滤掉连续重复的事件</p><h3 id="做啥的？-35"><a href="#做啥的？-35" class="headerlink" title="做啥的？"></a>做啥的？</h3><pre><code>Observable.just(1,2,3,3,1,5,6)        .distinctUntilChanged()        .subscribe(new Consumer&lt;Integer&gt;() {            @Override            public void accept(Integer integer) throws Exception {                Log.i(&quot;lybj&quot;,  integer+&quot;&quot;);            }        });</code></pre><h3 id="结果-33"><a href="#结果-33" class="headerlink" title="结果"></a>结果</h3><h2 id="take"><a href="#take" class="headerlink" title="take()"></a>take()</h2><h3 id="做啥的？-36"><a href="#做啥的？-36" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>控制观察者接收的事件的数量。</p><h3 id="怎么用？-22"><a href="#怎么用？-22" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code> Observable.just(1,2,3,4,5,6)                .take(3)                .subscribe(new Consumer&lt;Integer&gt;() {                    @Override                    public void accept(Integer integer) throws Exception {                        Log.i(&quot;lybj&quot;,  integer+&quot;&quot;);                    }                });</code></pre><h3 id="结果-34"><a href="#结果-34" class="headerlink" title="结果"></a>结果</h3><h2 id="debounce"><a href="#debounce" class="headerlink" title="debounce()"></a>debounce()</h2><h3 id="做啥的？-37"><a href="#做啥的？-37" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>如果两件事件发送的时间间隔小于设定的时间间隔则前一件事件就不会发送给观察者。 简单来说就是防抖动，比如按钮控制快速点击等。</p><h3 id="怎么用？-23"><a href="#怎么用？-23" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.just(1,2,3,4,5)                .map(new Function&lt;Integer, Integer&gt;() {                    @Override                    public Integer apply(Integer integer) throws Exception {                        Thread.sleep(900);                        return integer;                    }                })                .debounce(1,TimeUnit.SECONDS)                .subscribe(new Consumer&lt;Integer&gt;() {                    @Override                    public void accept(Integer integer) throws Exception {                        Log.i(&quot;lybj&quot;,  integer+&quot;&quot;);                    }                });</code></pre><h3 id="结果-35"><a href="#结果-35" class="headerlink" title="结果"></a>结果</h3><h2 id="firstElement-amp-amp-lastElement-amp-amp-elementAt"><a href="#firstElement-amp-amp-lastElement-amp-amp-elementAt" class="headerlink" title="firstElement() &amp;&amp; lastElement() &amp;&amp; elementAt()"></a>firstElement() &amp;&amp; lastElement() &amp;&amp; elementAt()</h2><h3 id="做啥的？-38"><a href="#做啥的？-38" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>firstElement(): 取事件序列的第一个元素。</p><p>lastElement(): 取事件序列的最后一个元素。</p><p>elementAt(): 以指定取出事件序列中事件，但是输入的 index 超出事件序列的总数的话就不会出现任何结果。</p><h3 id="怎么用？-24"><a href="#怎么用？-24" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.just(1,2,3,4)                .firstElement()                .subscribe(new Consumer&lt;Integer&gt;() {                    @Override                    public void accept(Integer integer) throws Exception {                        Log.i(&quot;lybj&quot;,  integer+&quot;&quot;);                    }                });</code></pre><h3 id="结果-36"><a href="#结果-36" class="headerlink" title="结果"></a>结果</h3><h1 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h1><p>1.all()</p><h3 id="做啥的？-39"><a href="#做啥的？-39" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>判断事件序列是否全部满足某个事件，如果都满足则返回 true，反之则返回 false。</p><h3 id="怎么用？-25"><a href="#怎么用？-25" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.just(1, 2, 3, 4, 5)                .all(new Predicate&lt;Integer&gt;() {                    @Override                    public boolean test(Integer integer) throws Exception {                        return integer &lt;= 4;                    }                }).subscribe(new Consumer&lt;Boolean&gt;() {            @Override            public void accept(Boolean aBoolean) throws Exception {                Log.i(&quot;lybj&quot;,  aBoolean+&quot;&quot;);            }        });</code></pre><h3 id="结果-37"><a href="#结果-37" class="headerlink" title="结果"></a>结果</h3><h2 id="takeWhile-amp-takeUntil"><a href="#takeWhile-amp-takeUntil" class="headerlink" title="takeWhile() &amp; takeUntil()"></a>takeWhile() &amp; takeUntil()</h2><h3 id="做啥的？-40"><a href="#做啥的？-40" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>takeWhile(): 从左边开始，将满足条件的元素取出来，直到遇到第一个不满足条件的元素，则终止 takeUntil(): 从左边开始，将满足条件的元素取出来，直到遇到第一个满足条件的元素，则终止 filter(): 是将所有满足条件的数据都取出。</p><h3 id="怎么用？-26"><a href="#怎么用？-26" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.just(1, 2, 3, 4, 5)                .takeWhile(new Predicate&lt;Integer&gt;() {                    @Override                    public boolean test(Integer integer) throws Exception {                        return integer &lt; 3;                    }                }).subscribe(new Consumer&lt;Integer&gt;() {                    @Override                    public void accept(Integer integer) throws Exception {                        Log.i(&quot;lybj&quot;,  integer+&quot;&quot;);                    }                });</code></pre><h3 id="结果-38"><a href="#结果-38" class="headerlink" title="结果"></a>结果</h3><h2 id="skipWhile"><a href="#skipWhile" class="headerlink" title="skipWhile"></a>skipWhile</h2><h3 id="做啥的？-41"><a href="#做啥的？-41" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>从左边开始，根据条件跳过元素</p><h3 id="怎么用？-27"><a href="#怎么用？-27" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.just(1,2,3,4,5,3,2,1,7)                .skipWhile(new Predicate&lt;Integer&gt;() {                    @Override                    public boolean test(Integer integer) throws Exception {                        return integer &lt; 3;                    }                }).subscribe(new Consumer&lt;Integer&gt;() {                    @Override                    public void accept(Integer integer) throws Exception {                        Log.i(&quot;lybj&quot;,  integer+&quot;&quot;);                    }                });</code></pre><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><h2 id="isEmpty-amp-defaultIfEmpty"><a href="#isEmpty-amp-defaultIfEmpty" class="headerlink" title="isEmpty() &amp; defaultIfEmpty()"></a>isEmpty() &amp; defaultIfEmpty()</h2><h3 id="做啥的？-42"><a href="#做啥的？-42" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>isEmpty(): 判断事件序列是否为空。</p><p>defaultIfEmpty(): 如果观察者只发送一个 onComplete() 事件，则可以利用这个方法发送一个值。</p><h3 id="怎么用？-28"><a href="#怎么用？-28" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.create(new ObservableOnSubscribe&lt;String&gt;() {            public void subscribe(@NonNull ObservableEmitter&lt;String&gt; emitter){                emitter.onComplete();            }        }).isEmpty()          .subscribe(new Consumer&lt;Boolean&gt;() {              @Override              public void accept(Boolean aBoolean) throws Exception {                  Log.i(&quot;lybj&quot;,  aBoolean+&quot;&quot;);              }          });</code></pre><h3 id="结果-39"><a href="#结果-39" class="headerlink" title="结果"></a>结果</h3><h2 id="contains"><a href="#contains" class="headerlink" title="contains()"></a>contains()</h2><h3 id="做啥的？-43"><a href="#做啥的？-43" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>判断事件序列中是否含有某个元素，如果有则返回 true，如果没有则返回 false。</p><h3 id="怎么用？-29"><a href="#怎么用？-29" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>在Observable.just(1,2,3,4,5,6)                .contains(2)                .subscribe(new Consumer&lt;Boolean&gt;() {                    @Override                    public void accept(Boolean aBoolean) throws Exception {                        Log.i(&quot;lybj&quot;,  aBoolean+&quot;&quot;);                    }                });</code></pre><h3 id="结果-40"><a href="#结果-40" class="headerlink" title="结果"></a>结果</h3><h2 id="sequenceEqual"><a href="#sequenceEqual" class="headerlink" title="sequenceEqual()"></a>sequenceEqual()</h2><h3 id="做啥的？-44"><a href="#做啥的？-44" class="headerlink" title="做啥的？"></a>做啥的？</h3><p>判断两个 Observable 发送的事件是否相同。</p><h3 id="怎么用？-30"><a href="#怎么用？-30" class="headerlink" title="怎么用？"></a>怎么用？</h3><pre><code>Observable.sequenceEqual(Observable.just(&quot;小明&quot;, &quot;小方&quot;, &quot;小李&quot;),                Observable.just(&quot;小明&quot;, &quot;小方&quot;, &quot;小李&quot;, &quot;小张&quot;))                .subscribe(new Consumer&lt;Boolean&gt;() {                    @Override                    public void accept(Boolean aBoolean) throws Exception {                        Log.i(&quot;lybj&quot;,  aBoolean+&quot;&quot;);                    }                });</code></pre><h3 id="结果-41"><a href="#结果-41" class="headerlink" title="结果"></a>结果</h3>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RxJava2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>百度地图GPS坐标转换</title>
    <link href="/2020/07/15/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEGPS%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/"/>
    <url>/2020/07/15/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEGPS%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<p>官方接口文档<br><a id="more"></a></p><p><br></p><blockquote><p><a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/changeposition" target="_blank" rel="noopener">http://lbsyun.baidu.com/index.php?title=webapi/guide/changeposition</a></p></blockquote><p><br></p><p><img src="https://bolg-1253436879.cos.ap-chengdu.myqcloud.com/uPic/Jrp0Qb.jpg" alt="&#39;&#39;"></p><p><img src="https://bolg-1253436879.cos.ap-chengdu.myqcloud.com/uPic/YZvhs0.jpg" alt="&#39;&#39;"></p>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>坐标</tag>
      
      <tag>gps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓4.0Bug</title>
    <link href="/2020/07/15/%E5%AE%89%E5%8D%934-0Bug/"/>
    <url>/2020/07/15/%E5%AE%89%E5%8D%934-0Bug/</url>
    
    <content type="html"><![CDATA[<p>修改gradle-&gt;wrapper-&gt;gradle-wrapper.properties中的gradle版本太新，可以缓存老版本。<br><a id="more"></a></p><pre><code>distributionUrl=https\://services.gradle.org/distributions/gradle-5.6.4-all.zip</code></pre><p>依赖也改成低版本</p><pre><code>dependencies {        classpath &#39;com.android.tools.build:gradle:3.6.2&#39;}</code></pre>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS超出范围自动省略</title>
    <link href="/2020/07/15/CSS%E8%B6%85%E5%87%BA%E8%8C%83%E5%9B%B4%E8%87%AA%E5%8A%A8%E7%9C%81%E7%95%A5/"/>
    <url>/2020/07/15/CSS%E8%B6%85%E5%87%BA%E8%8C%83%E5%9B%B4%E8%87%AA%E5%8A%A8%E7%9C%81%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="通过css设置文字强制不换行超出用省略号"><a href="#通过css设置文字强制不换行超出用省略号" class="headerlink" title="通过css设置文字强制不换行超出用省略号"></a>通过css设置文字强制不换行超出用省略号</h3><a id="more"></a><pre><code>{    white-space: nowrap; //文本强制不换行；    text-overflow:ellipsis; //文本溢出显示省略号；    overflow:hidden; //溢出的部分隐藏；}</code></pre><h3 id="超出两行用省略号"><a href="#超出两行用省略号" class="headerlink" title="超出两行用省略号"></a>超出两行用省略号</h3><pre><code>{    overflow: hidden;    -webkit-line-clamp: 2;    text-overflow: ellipsis;    display: -webkit-box;    -webkit-box-orient: vertical;}</code></pre><p>-webkit-line-clamp用来限制在一个块元素显示的文本的行数。 为了实现该效果，它需要组合其他的WebKit属性。<br>常见结合属性：</p><ol><li><p>display: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。</p></li><li><p>-webkit-box-orient 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。</p></li></ol><p>3.text-overflow: ellipsis;，可以用来多行文本的情况下，用省略号“…”隐藏超出范围的文本 。</p>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>换行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔2020-07-15</title>
    <link href="/2020/07/15/%E9%9A%8F%E7%AC%942020-07-15/"/>
    <url>/2020/07/15/%E9%9A%8F%E7%AC%942020-07-15/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误，请不要再试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码方可查看</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="6a52cdf8301aa068bdab9f06eedc63d28398154c3fcfd8ee3c42765c8f4b19fd">38ff5a61528ca7e12dabe39516124bb7ef9f984958d425166bb9c793b331fa87c90ae486c71b564257a92406e6ce884a938c5557e695882e149fb45ead294d4ae7c5d0d1bf7a4db37580b02d1a38c0c2710301d251bdc467302388274eb821e6d9d53f503c80cf7ff64ad87334148142f343692296fef100466edc191a24d4dc243098378edefa4d86f88da821d6cf5f6271afe681c7776101a63e9f7a8a539db13005228b8a58c8818599be9309fc1973fcfab754edf7acff0572563a94d9cc05a1a90010340fb3cd3b5fd2bed6663b61eb6d6d75d3541da0cb351eb30b11b8fb4ce7d513a3f40caa201c874483fbad7e9f773dc2c8de3ae31facd3756d99d5</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【转】EggJs使用Oauth2</title>
    <link href="/2020/03/18/EggJs%E4%BD%BF%E7%94%A8Oauth2/"/>
    <url>/2020/03/18/EggJs%E4%BD%BF%E7%94%A8Oauth2/</url>
    
    <content type="html"><![CDATA[<p>Eggjs搭建Oauth2环境<br><a id="more"></a></p><blockquote><p><a href="https://www.jianshu.com/p/1fe043a700bf" target="_blank" rel="noopener">https://www.jianshu.com/p/1fe043a700bf</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>eggjs</tag>
      
      <tag>oauth2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔2020-03-17</title>
    <link href="/2020/03/17/%E9%9A%8F%E7%AC%942020-03-17/"/>
    <url>/2020/03/17/%E9%9A%8F%E7%AC%942020-03-17/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误，请不要再试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码方可查看</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="3c946ca070002c96a6da80d1d9f1eb828e9b68a65e9651af341ab8ef9dffd6fa">12dab374fc4cc1a6ea05910a223800d72f59b06b076df66ce8bb4463194a0a5e32cb827f7595df604ee22ff85f95bb0e18bfec676fcefed0d562180b8b87602a06f036ee093406e0150c7fd827e8dbc0705b21a52f8f92dfa6d1988eec1083c5f297afaf83309f57be278a8c59f2cf0cae1842773ae2a4fbf483a4f5fe4b490686175dd856409cd17acb82d7da236e883d9a1a1707adc50ef378d70edf4ca9a2e650e1b2ac12dc9a6c6978f84ca9cbd9f0ae9e67d972859db7cab7a53b9c04d10be6a48fd383616b8b4aead5b147c8d5b364baf56cc55dff1226db9d53b5feef5f6c597ff5caeb9b61acdb62a4eb78984bfc1607c405c5a649e064c942e44ab129710723b0a9fcdc2dc6fb0082fb30a2fec36706c0b6e2cca0b45b810b6aeb8575d36fb3b65a4f7f1931d7b0ca5cd1bcdc81fde17f3ccce4c83e622c88522a1d1c29c392afe04c280f6d593bfbe45bf897b03dd28adbffcf8db3075adf366f1121a398ed9ceea54059ad1b7d53a9e525</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>随笔2020-03-16</title>
    <link href="/2020/03/16/%E9%9A%8F%E7%AC%942020-03-16/"/>
    <url>/2020/03/16/%E9%9A%8F%E7%AC%942020-03-16/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误，请不要再试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码方可查看</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="7af829090d111867587b3351edd98f61d4e4275da016bcf8d8a6cb0b0cfa2c1a">14aaf5d8b26565ec978f4f5a60370e91f66bb244e29ca9f225f913d7f94edb63c11e2fccd64f4498efb189cea8534133364f0acbb8ea83f800321a00c56281cf84a59ffc691572a6674bc1f183c6910a788ae19c1d4cf9423c19ec0fc5d515dd5734057c31e54eaaf6124986b2ce1608eec630d9fcc2160236a8d7d70a083fdd7f657399fcfaa25a2f5e1b4df85d4e7f4f3e7da4e8694c55e2c1f7c86ec279bee1ed7c6cfedf555d4be8e23de8c99771a9068a3430aa97a31e7c846839ad49a9802e2179ec492361079bd545f31f8652707bdb7c60c1e7e2fa3e40f330ad517f05bb37eecf37dcd44878058df1ca5f808c770158c28f0d0ac3ea6645c6fcc0e9658ba39b3b45ccf1e59434dcbcecda3b9f551e908bbe907a5537f7ef226ede87537c49db88ff4496f8bd1046b23f819958797e51847b62fda7a7c0094be77ab59e1cfd1988fb2c261684b44c0df9d6de59b336f29da1543a567177852fa904303939456cd18d63c8fc6875f074e128561beaf1e5225ead14266259b528ea86622473e840e3b2a9ee1b8e7f1471c95528a19f4fe3bafe661c5c835dc7d1199352e2b5c7a82c0a6672783eba82131c67663a8c8886434254098cd0a921fa902fa1eaf451f53b53b599bc282f69605be8efdf28ae27d27080ba1a7c5a0a7d42b4aeebce2170f19b7c4f3cc0c2b6102fa61d21c9d5a05d5731225a1cef639e63f4feaa3c88b17502dbe6efabf124c43758bca5bcc05cc998fb10f29b582c5fc407819bd2e3ac5a56b920c43388ac5e6ff34402ce19b23a987cc546462802061be19b3b0a0c1a3a1c3cf1f7b46ca931a5519731dbbda154f2ca3f95d491d51622f0662af32e8c06864d2416d6de06cc472d4dfc20dd1f008bbaf0a407ceac47646cae2f5c3b6293b385663bf005b837e639432970e427a9594e21fe2a01623cf9b50c29652d00de82e3806869e7ba9ef66f874079d3581b875a89816e3ef652d9f4199c5657959275478eea68243f1bfa64e5ca2ad359ca80f1805690802e101e33c57d54b13c6e0d1660eaa2bf5f0ffdfd9841357fd22b6c5e607f28ee1282dc3cb19c3142b4f90c91757d6e366f5af8382f982651ac597df25b5ba4b5b2cd4d22e5b808acedc8dc22365845bb6eaeb5711a5f23a300e034ffde3e22ea7cc513d6e282270aea7697040cc8501118a32ef22ed0fbb1a80571630fdee104e0b249eceec130a0b7a35a04823cd1fd7913d48de182a1f7bb061a7b05cf1825e837db63c9136b84d053fa88ec2d408dcc5c8f907c88faca824e1b30be1134e8338900501ef8c31cfa32407fa10ff0656bb069a19b3d4aabc011d7357ee0bc95cb2cdfbebb57bf415f1fa3e1de3cd75ac16979171edcbba9ea3a8b755bd22deec7d6888116671bbd7568a998c808a3970cd976eec95a6ff16501f8181a6bf356f9c7027337059e8b88f8e05fc448e69f5b16c6fc12</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CentOS环境搭建</title>
    <link href="/2020/03/12/CentOS%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/03/12/CentOS%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>系统：centos 6.5 系统<br>前端：vue<br>后端：eggjs</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h2><h3 id="设置源"><a href="#设置源" class="headerlink" title="设置源"></a>设置源</h3><pre><code>curl -sL https://rpm.nodesource.com/setup_8.x | bash -</code></pre><h3 id="安装-nodejs-1"><a href="#安装-nodejs-1" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h3><pre><code>yum install -y nodejs</code></pre><h2 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h2><h3 id="设置源-1"><a href="#设置源-1" class="headerlink" title="设置源"></a>设置源</h3><pre><code>rpm -ivh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm</code></pre><h3 id="安装-nginx-1"><a href="#安装-nginx-1" class="headerlink" title="安装 nginx"></a>安装 nginx</h3><pre><code>yum install nginx</code></pre><h3 id="启动-nginx"><a href="#启动-nginx" class="headerlink" title="启动 nginx"></a>启动 nginx</h3><pre><code>service nginx start</code></pre><h3 id="nginx-service-无法执行"><a href="#nginx-service-无法执行" class="headerlink" title="nginx service 无法执行"></a>nginx service 无法执行</h3><pre><code>vim /etc/selinux/config</code></pre><p>SELINUX=enforcing 改为 SELINUX=disabled<br>重启 reboot</p><h2 id="安装-redis"><a href="#安装-redis" class="headerlink" title="安装 redis"></a>安装 redis</h2><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><pre><code>wget http://download.redis.io/releases/redis-4.0.8.tar.gz</code></pre><h3 id="将-Redis-移动到根目录，方便找"><a href="#将-Redis-移动到根目录，方便找" class="headerlink" title="将 Redis 移动到根目录，方便找"></a>将 Redis 移动到根目录，方便找</h3><pre><code>mv redis-4.0.8.tar.gz /etc</code></pre><h3 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h3><pre><code>tar xzf /etc/redis-4.0.8.tar.gz</code></pre><h3 id="删掉不需要的"><a href="#删掉不需要的" class="headerlink" title="删掉不需要的"></a>删掉不需要的</h3><pre><code>rm -rf /etc/redis-4.0.8.tar.gz</code></pre><h3 id="进入-Redis-文件夹"><a href="#进入-Redis-文件夹" class="headerlink" title="进入 Redis 文件夹"></a>进入 Redis 文件夹</h3><pre><code>cd redis-4.0.8</code></pre><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><pre><code>make #无法make将上面的4.0.8换成5.0.7</code></pre><h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><pre><code>vim redis.conf</code></pre><p>开始远程连接</p><pre><code>#bind 127.0.0.1 //注释</code></pre><p>关闭保护模式</p><pre><code>preotected-mode no</code></pre><p>开启后台模式</p><pre><code>daemonize no</code></pre><h3 id="启动-redis"><a href="#启动-redis" class="headerlink" title="启动 redis"></a>启动 redis</h3><pre><code>src/redis-server redis.conf</code></pre><h3 id="打开开机启动配置文件"><a href="#打开开机启动配置文件" class="headerlink" title="打开开机启动配置文件"></a>打开开机启动配置文件</h3><pre><code>vim /etc/rc.local</code></pre><h3 id="添加-redis-开机启动"><a href="#添加-redis-开机启动" class="headerlink" title="添加 redis 开机启动"></a>添加 redis 开机启动</h3><pre><code>/etc/redis-4.0.8/src/redis-server /etc/redis-4.0.8/redis.conf</code></pre><blockquote><p>参考地址：<a href="https://www.jianshu.com/p/ea47015dfe3a" target="_blank" rel="noopener">https://www.jianshu.com/p/ea47015dfe3a</a></p></blockquote><h1 id="程序部署"><a href="#程序部署" class="headerlink" title="程序部署"></a>程序部署</h1><p>首先需要安装 git</p><h3 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h3><pre><code>yum install git</code></pre><h3 id="创建文件文件夹"><a href="#创建文件文件夹" class="headerlink" title="创建文件文件夹"></a>创建文件文件夹</h3><pre><code>mkdir /www/webmkdir /www/server</code></pre><h2 id="部署前端"><a href="#部署前端" class="headerlink" title="部署前端"></a>部署前端</h2><h3 id="进入-web-文件夹-clone-前端代码"><a href="#进入-web-文件夹-clone-前端代码" class="headerlink" title="进入 web 文件夹 clone 前端代码"></a>进入 web 文件夹 clone 前端代码</h3><pre><code>git clone http://用户名:密码@git地址</code></pre><h2 id="部署后端"><a href="#部署后端" class="headerlink" title="部署后端"></a>部署后端</h2><h3 id="进入-server-文件夹-clone-后端代码"><a href="#进入-server-文件夹-clone-后端代码" class="headerlink" title="进入 server 文件夹 clone 后端代码"></a>进入 server 文件夹 clone 后端代码</h3><pre><code>git clone http://用户名:密码@git地址</code></pre><h3 id="进入项目文件夹（如：test），安装依赖"><a href="#进入项目文件夹（如：test），安装依赖" class="headerlink" title="进入项目文件夹（如：test），安装依赖"></a>进入项目文件夹（如：test），安装依赖</h3><pre><code>npm install --production</code></pre><p>如果报错直接全部安装</p><pre><code>npm install</code></pre><h3 id="启动后台程序"><a href="#启动后台程序" class="headerlink" title="启动后台程序"></a>启动后台程序</h3><pre><code>npm start</code></pre><h2 id="配置-nginx-代理"><a href="#配置-nginx-代理" class="headerlink" title="配置 nginx 代理"></a>配置 nginx 代理</h2><h3 id="找到配置文件"><a href="#找到配置文件" class="headerlink" title="找到配置文件"></a>找到配置文件</h3><pre><code>cd  /etc/nginx/conf.d</code></pre><h3 id="编辑配置文件-1"><a href="#编辑配置文件-1" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><pre><code>vim default.conf</code></pre><h3 id="添加前端代理"><a href="#添加前端代理" class="headerlink" title="添加前端代理"></a>添加前端代理</h3><pre><code>server {listen 8000;server_name 127.0.0.1;root /www/web/test_web; # 前端页面位置</code></pre><h3 id="前端界面代理"><a href="#前端界面代理" class="headerlink" title="前端界面代理"></a>前端界面代理</h3><pre><code>location / {    root /www/web/test_web; # 前端页面位置    try_files $uri $uri/ /index.html; # vue history模式专用}</code></pre><h3 id="前端接口代理"><a href="#前端接口代理" class="headerlink" title="前端接口代理"></a>前端接口代理</h3><pre><code>location /api/v1 {    proxy_pass http://localhost:7001 # 后台地址}</code></pre>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>centos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔2020-03-12</title>
    <link href="/2020/03/12/%E9%9A%8F%E7%AC%942020-03-12/"/>
    <url>/2020/03/12/%E9%9A%8F%E7%AC%942020-03-12/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误，请不要再试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码方可查看</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="b0e332666c4c216f516cf526ecc8fc78d15e3f5b474dd8458b191d342810baa2">b2dcccd28030310fbcd961bd0efdbce620cfa4e4fb7ded7387754cf58cfceab90ee5a2ffe0038e357ad74ba94b25898aa09244c42a502da0d3380176d1bff39d4eae699d54cc57f8b6244dc7912787184973dc9c4b6facdf3139029ec3e91d16a10385a5145a37259959a562810ee0a59090bbb161e551465e202e647a4362eb273676e9d9c5752c70927d29fa52a21d853e826708c09691c66bda9cca20cedd219dd99532a0183b743c2d428f7c0052674a8c1e079a3302024506a3f22db73c73a04e070e93d4b1f97444ef1278bcf319e3505e4141f10314c2ae916234a19106290d61eda8203f60f25bf16f5043a68be0ded65e8805b357c04eeac4c75c5ec7c693a13ac62fab170a03953817a9f2493abcc02f37cefeab39477b0cb862b34a8f51ea263fb9eca10596629611c6656b92ba752c6a8d94a937bfe1f45555a58a5ca4bcdfa5c363d0f2834b90ad3a1613ddbc51630762d37df44dbf4d2df29aada4a024ef358e173f0b88363cc7d3f428fd3e7f083c7eed979c71bad5b63b8cf2b6887d86b27c7045d3e631d47c70d17acf2b6bdfb47b9e50e1da3825bd5614c4ec0fb39c737bd051f0ea4a0e6aeac1fa87f6baa3a8f1c413cff0b79421f1c8f192b1e6df5e87459c898ddde0c31d6ae392bbdff332c1a97f11a463f56617d33cf0d4076e564b8eb1a4403ce78b54f16664d25d3e5abb3eb842875f0722e3b22d38c4a9b89887fd5e5c73e3d943509968f4553b98946d8c473b89957ff6127876ea8435d753df1e81b701b246d9e9e70864d330a1348adaa77387e953ac2a616b538eb0fc107976e216d38f83f003a29bf5bd1066e499ee9af827d2dd93c985c85de371f0e7c85fad6ed236310fee068effa4e4425c625ff9fc5dd30dc3291969b754420b70307b5693e5b91b57a12b44d14de7fa4ce050a79a114245c6dac065a1136be8182c28d4407f89c5a1956a</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>不知道为啥</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔2019-12-31</title>
    <link href="/2019/12/31/%E9%9A%8F%E7%AC%942019-12-31/"/>
    <url>/2019/12/31/%E9%9A%8F%E7%AC%942019-12-31/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误，请不要再试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码方可查看</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="bcab4af1a8888bdce85fb0adf11c0f65e8d4b4cd5aa36e1def7faa35abf8b1e7">46d73267503c86f887d75806ba4d6923b89aa8a425ac12fc1d11b4ec7be68094d4af8e37571358287cb44fc2ff9af2df7480e87e28ae2f9c713bf1b465e12651f0ccc2effdcbb001eda65a4510db267a5f900c074d9a36c6d631b0d8b0f174fe1db6b1b6e19751bbedc411e5fda5b28662b18007ac611a29d7c0ba1422eb46367e26cc6215d43839da73cb9fc8d015e2b53a1f7b9a2bf484a258e34937bc50d82be531dd1fc459a3690dfc8effa748b608c139a468263dc85a71f2a2abeae614a2222bee34e498e4023695bcfdb6fb25359fb0cfacbf919d7c4835c48b05054a5bfae32d6b066ed347216ef3b7faa5ce3d7bd8e07b53226aab1f792194551bd5007c37143070bda17616971ee95f1235ab4196f813aa4360a002e13d684f51548f3d742166ce3a814e402e25db47519e13a1c6f788173f82848070fe345f2ec5e1d7360dde28158327ca5c717b340640f57accd670ee123059af90664613048f3c0f0f1aaaf9273f8db9c89213e664e6e0f7102414e7d7ff32531078c68f1100</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>辞旧迎新</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔2019-11-13</title>
    <link href="/2019/11/13/%E9%9A%8F%E7%AC%942019-11-13/"/>
    <url>/2019/11/13/%E9%9A%8F%E7%AC%942019-11-13/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误，请不要再试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码方可查看</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="7954f684a2b342bad79dc2b3cb1f6476611f352750189de56569dcabb9903ce3">504b1e14ce9beacc7413adbac75f5c72e3bd43523c9822d23a73d6b3568c99dd9807edc14a522748fe31e908b3bd6204fc0a28f145d4de86142a58959139907a4289ef85f6c6a5f192038dd1908123df340bafa6a808dbe761d8807d56798e86ac35c406d117b5d54d851e072bfe73b425d9810b24571194a24717c3e30ae206ed8b532ae7ca98c0edd3d84adfe1bec769bb25930fa784e718add1970127d6bee04f5eb1240a85518729f303d92a61bd803fdbea9d7a198a514b6751af0147ce45ba198a87d9fb95e71f1aee23eb4443166d11b13f14dbd73699d1ea59cc9f25fbcd1d7dcee7e61174e23e1483828948b50af421864889d49da5a51eb65574b6994998e08b7a28c1f7f6cf68946479577743148427eeb15c1efad48ec5dd5d0732f8c4523a156722fd95b07b9aeff06a80d247523f77b0331974e3d4fa313c78cc7fa9f8bf315898138b9dee4d3c55c422f86199b00b0e8b091c64f3bfdaf3ebdd1f725341a0d9b28d07874ae9ba09b0d1d1aa2e798f094fd01b1e1eba62dc5c12f4abaad58cdf3573d56d0a071e40e9f70996d3adea65678e908b2886ef295ada9e4da9a2eea331b917e27b07ab8828c5f7a19d37110b6a1c4bcfee9ac447efa906ce42a2656c2ff6c64f92c85b0def1ac40f665db9e6e800e37c789af0b17757683f6c94c622742ff4811c54cc99f5f99fce0297c583536ee8c175b0b103ae69e7634d9ec16ce226704c7837580c4eca0009789a42f72e513cb8c8c16805e6d88b9d11fffdfc566f8cff09e25f164090784b0f5e52efbf3ac83ef4d43f2b4080835c2f75fae35901ee95c7bd0630575d79ef2c3f7eb52bfc773d172f30d3c1bd2dedac0d8662d5679aa6bc03d677af91a8900b815c9134305dc85752595a6b3b6f682ed1d8c904cb1801060a681baeb33439623585298cf80b7158b0a11afd036194aa5c1c6c9ee2f9f6b6207a931ba2eadabc667a1313bdae27f256df380c148166c3c3742190ea65a1bad93e90c1843a0ec726bd92176d572bc0156b7c298b67320e44f8783fc8d40599acf122198ebe57ce296a248af85d5a36452b4127c3dd2db98d8a10ad9bdf1e86fcfac04dd254a1b8a6471dce68aebd2891bbff9e1c36ad9b51c1bca57977f95594f73fd06f9ada470b6a30d257b44b6ac58593ee7b871fa80a73a69c789b715e7a58f25d19c669dce9ba4c77d0d0c1f561951ef4618c7edcb3ffdca63f365802875571392e18f331a62984ee3fbad0c995ec395ed374934f4682c852b4f7c30bf3cccc516daa8fde9f2ca464db0a04112c5e1885b160e90e8da27792e31913ed43651553685d7e243d6aa6d8a86f94e3f1700d40e830590d473150b1c4aea2a5977a724874f11810b584e0a191333718014f98afa210dd60d7ebc624a54bc7420b52fa53369e4718fa516d1492cae99563ddaa277ba76d3ec013e0d4f9a931a30b113a2e37387be03e3f148ba27565858ca9427b0fd2b7ad7b82d7821ad98aec86560239f662611d966bbe95b36dadb1f7daa184a821e90e79558d317e778f33e12ac9e77556dc188d8a48bb659ddc3a3ba82228512b6f147d801ba3b141e936c09d294a9c7ed97fb5f2ff024ace97fad381a4503cefcdbd8be57079ce470ff00dc360f6</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>双十一</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EMQTT服务搭建</title>
    <link href="/2019/10/31/EMQTT%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"/>
    <url>/2019/10/31/EMQTT%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考：<a href="https://docs.emqx.io/broker/v3/cn/" target="_blank" rel="noopener">https://docs.emqx.io/broker/v3/cn/</a></p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Ubuntu 16.04 LTS amd64(64bit)</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装所需要的依赖包"><a href="#安装所需要的依赖包" class="headerlink" title="安装所需要的依赖包"></a>安装所需要的依赖包</h2><pre><code>$ sudo apt update &amp;&amp; sudo apt install -y \    apt-transport-https \    ca-certificates \    curl \    gnupg-agent \software-properties-common</code></pre><h2 id="添加EMQ-X的官方密钥"><a href="#添加EMQ-X的官方密钥" class="headerlink" title="添加EMQ X的官方密钥"></a>添加EMQ X的官方密钥</h2><pre><code>$ curl -fsSL https://repos.emqx.io/gpg.pub | sudo apt-key add –$ sudo apt-key fingerprint 3E640D53pub   rsa2048 2019-04-10 [SC]    FC84 1BA6 3775 5CA8 487B  1E3C C0B4 0946 3E64 0D53uid           [ unknown] emqx team &lt;support@emqx.io&gt;</code></pre><p>如果没现pub…再添加一次</p><h2 id="使用以下命令设置-stable-存储库。-如果要添加-unstable-存储库，请在以下命令中的单词-stable-之后添加单词-unstable"><a href="#使用以下命令设置-stable-存储库。-如果要添加-unstable-存储库，请在以下命令中的单词-stable-之后添加单词-unstable" class="headerlink" title="使用以下命令设置 stable 存储库。 如果要添加 unstable 存储库，请在以下命令中的单词 stable 之后添加单词 unstable"></a>使用以下命令设置 stable 存储库。 如果要添加 unstable 存储库，请在以下命令中的单词 stable 之后添加单词 unstable</h2><pre><code>$ sudo add-apt-repository \    &quot;deb [arch=amd64] https://repos.emqx.io/emqx-ce/deb/ubuntu/ \    $(lsb_release -cs) \    stable&quot;</code></pre><h2 id="更新-apt-包索引"><a href="#更新-apt-包索引" class="headerlink" title="更新 apt 包索引"></a>更新 apt 包索引</h2><pre><code>$ sudo apt update</code></pre><h2 id="查询可用版本"><a href="#查询可用版本" class="headerlink" title="查询可用版本"></a>查询可用版本</h2><pre><code>$ sudo apt-cache madison emqx</code></pre><h2 id="使用第二列中的版本字符串安装特定版本，例如-3-2-6"><a href="#使用第二列中的版本字符串安装特定版本，例如-3-2-6" class="headerlink" title="使用第二列中的版本字符串安装特定版本，例如 3.2.6"></a>使用第二列中的版本字符串安装特定版本，例如 3.2.6</h2><pre><code>$ sudo apt install emqx=3.2.6</code></pre><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="设置用户权限"><a href="#设置用户权限" class="headerlink" title="设置用户权限"></a>设置用户权限</h2><h3 id="关闭匿名访问"><a href="#关闭匿名访问" class="headerlink" title="关闭匿名访问"></a>关闭匿名访问</h3><ul><li><p>打开/etc/emqx文件夹下的emqx.conf</p></li><li><p>设置allow_anonymous = false</p></li></ul><h3 id="开启用户名认证"><a href="#开启用户名认证" class="headerlink" title="开启用户名认证"></a>开启用户名认证</h3><pre><code>sudo emqx_ctl plugins load emqx_auth_username</code></pre><h3 id="添加认证用户"><a href="#添加认证用户" class="headerlink" title="添加认证用户"></a>添加认证用户</h3><pre><code>sudo emqx_ctl userssudo emqx_ctl users add 用户名 密码</code></pre><h3 id="配置规则"><a href="#配置规则" class="headerlink" title="配置规则"></a>配置规则</h3><ul><li><p>打开/etc/eqmx文件夹下的acl.conf</p></li><li><p>找到以下内容</p><pre><code>  %% 允许 &#39;dashboard&#39; 用户订阅 &#39;$SYS/#&#39;  {allow, {user, &quot;dashboard&quot;}, subscribe, [&quot;$SYS/#&quot;]}.  %% 允许本机用户发布订阅全部主题  {allow, {ipaddr, &quot;127.0.0.1&quot;}, pubsub, [&quot;$SYS/#&quot;, &quot;#&quot;]}.  %% 拒绝除本机用户以外的其他用户订阅 &#39;$SYS/#&#39; 与 &#39;#&#39; 主题  {deny, all, subscribe, [&quot;$SYS/#&quot;, {eq, &quot;#&quot;}]}.  %% 允许上述规则以外的任何情形  {allow, all}.</code></pre></li><li><p>修改权限</p><p>  将{allow, {user, “dashboard”}, subscribe, [“$SYS/#”]}删除，不允许用户订阅统配符</p></li></ul><h1 id="设置集群"><a href="#设置集群" class="headerlink" title="设置集群"></a>设置集群</h1><h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><p>打开/etc/emqx/emq.conf，找到node.name</p><h2 id="修改节点"><a href="#修改节点" class="headerlink" title="修改节点"></a>修改节点</h2><pre><code>node.name=emq@局域网IP</code></pre><h2 id="加入集群"><a href="#加入集群" class="headerlink" title="加入集群"></a>加入集群</h2><pre><code>sudo emqx_ctl cluster join emq@主服务器</code></pre><h2 id="离开集群"><a href="#离开集群" class="headerlink" title="离开集群"></a>离开集群</h2><p>主动离开<br></p><pre><code>sudo emqx_ctl luseter leave &lt;br&gt;</code></pre><p>从集群中删除<br></p><pre><code>sudo emqx_ctl cluster force-leave emq@要删除的服务器</code></pre><h1 id="启动EMQX"><a href="#启动EMQX" class="headerlink" title="启动EMQX"></a>启动EMQX</h1><h2 id="直接启动"><a href="#直接启动" class="headerlink" title="直接启动"></a>直接启动</h2><pre><code>$ emqx start</code></pre><h2 id="systemctl-启动"><a href="#systemctl-启动" class="headerlink" title="systemctl 启动"></a>systemctl 启动</h2><pre><code>$ sudo systemctl start emqx</code></pre><h2 id="service-启动"><a href="#service-启动" class="headerlink" title="service 启动"></a>service 启动</h2><pre><code>$ sudo service emqx start</code></pre>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mqtt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信公众号支付记录</title>
    <link href="/2019/10/31/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%94%AF%E4%BB%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2019/10/31/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%94%AF%E4%BB%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="微信支付环境"><a href="#微信支付环境" class="headerlink" title="微信支付环境"></a>微信支付环境</h1><h2 id="在微信支付后台配置好支付目录"><a href="#在微信支付后台配置好支付目录" class="headerlink" title="在微信支付后台配置好支付目录"></a>在微信支付后台配置好支付目录</h2><p>在微信商户平台（pay.weixin.qq.com）设置您的公众号支付支付目录，设置路径：商户平台–&gt;产品中心–&gt;开发配置.</p><p>公众号支付需要配置支付授权目录，将在这个目录里面发起支付，如果不设置是无法调用微信支付的。<br>如：<a href="http://www.hhhub.cn/wechat/pay" target="_blank" rel="noopener">http://www.hhhub.cn/wechat/pay</a><br><img src="https://bolg-1253436879.cos.ap-chengdu.myqcloud.com/uPic/wechat_pay_1.png" alt="wechat_pay"></p><h2 id="公众号后台配置"><a href="#公众号后台配置" class="headerlink" title="公众号后台配置"></a>公众号后台配置</h2><p>公众号支付必须要有openid才行，这里需要在公众号配置网页授权域名。<br>这里需要让微信能够访问到txt中的内容。<br><img src="https://bolg-1253436879.cos.ap-chengdu.myqcloud.com/uPic/wechat_pay_2.png" alt="wechat_pay"></p><p>使用nodejs可以简单实现</p><pre><code>var  http  =  require(&#39;http&#39;);  http.createServer(function  (request,  response)  {      response.writeHead(200,  {&#39;Content-Type&#39;:  &#39;text/html;  charset=utf-8&#39;});      if(request.url!==&quot;/favicon.ico&quot;){        response.write(&#39;txt的内容&#39;); //这里填写微信给的文本内容         response.end();     }  }).listen(80);  console.log(&#39;Server  running  at  http://127.0.0.1:8000/&#39;);  </code></pre><p>执行以上代码，就可以配置成功。</p><h1 id="nodejs后台配置"><a href="#nodejs后台配置" class="headerlink" title="nodejs后台配置"></a>nodejs后台配置</h1><h2 id="获得openid"><a href="#获得openid" class="headerlink" title="获得openid"></a>获得openid</h2><p>打开如下连接并重定向到redirect_uri后面的连接中<br>需要主要的是该链接需要进行加密<br>编码地址</p><blockquote><p><a href="http://tool.chinaz.com/tools/urlencode.aspx" target="_blank" rel="noopener">http://tool.chinaz.com/tools/urlencode.aspx</a></p></blockquote><pre><code>    //例 1.1    //express示例代码    exports.bindWechat = function(req,res){        let state = req.query.state;        res.redirect(&#39;https://open.weixin.qq.com/connect/oauth2/authorize?appid=【微信AppID】&amp;redirect_uri=【https%3a%2f%2fwww.netrelay.cn%2fwechat】&amp;response_type=code&amp;scope=snsapi_base&amp;state=&#39;+state+&#39;#wechat_redirect&#39;);    }</code></pre><p>重定向后从query中取出code,你用request取出openid</p><pre><code>//例 1.2//express示例代码    let url = &quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=【微信AppID】&amp;secret=【微信secret】&amp;code=&quot;+req.query.code+&quot;&amp;grant_type=authorization_code&quot;;    request(url, function (error, response, body) {        let content = JSON.parse(body);        let openid = content.openid;    })</code></pre><h2 id="后台生成调起支付的必备参数"><a href="#后台生成调起支付的必备参数" class="headerlink" title="后台生成调起支付的必备参数"></a>后台生成调起支付的必备参数</h2><p>调用微信支付需要一系列的复杂步骤，这里直接引用工具类<a href="https://bolg-1253436879.cos.ap-chengdu.myqcloud.com/files/wxpay.js" target="_blank" rel="noopener">wxpay</a></p><pre><code>//例 1.3exports.gsmOrderPay = function (req, res, next) {    //以下几个参数看文档 https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_1    wxpay.orderWithDetail(attach,body,detail, mch_id, openid,bookingNo, total, notify_url).then(function(data){        res.json({            args: data        });    });};</code></pre><p>这里需要注意的是notify_url，这个连接需要是一个post接口.<br>在这里能够收到订单反馈的信息，并且需要上报给微信，否则微信会一直向接口发送post请求。</p><pre><code>//例 1.4exports.notify = function(req, res, next){    let info = req.body.xml;//微信订单返回的信息    res.end(wxpay.notify(req.body.xml));//回馈给微信})</code></pre><h1 id="前段配置"><a href="#前段配置" class="headerlink" title="前段配置"></a>前段配置</h1><p>前段需要引入jsapi</p><blockquote><script src="https://res.wx.qq.com/open/js/jweixin-1.2.0.js"></script></blockquote><p>发起支付</p><pre><code>    function payGsm() {        $.ajax({            url: &#39;/user/gsm_order/toPay&#39;,//这个post请求是请求到上面的例1.3            dataType: &quot;JSON&quot;,            type: &#39;POST&#39;,            data: {total:total},            success:function(data){                if (typeof WeixinJSBridge == &quot;undefined&quot;) {                    if (document.addEventListener) {                        document.addEventListener(&#39;WeixinJSBridgeReady&#39;, onBridgeReady, false);                    } else if (document.attachEvent) {                        document.attachEvent(&#39;WeixinJSBridgeReady&#39;, onBridgeReady);                        document.attachEvent(&#39;onWeixinJSBridgeReady&#39;, onBridgeReady);                    }                } else {                    //data.args的args来自于例1.3返回的args                    onBridgeReady(data.args);                }            },            error: function (err) {            }        });    }    function onBridgeReady(args) {        WeixinJSBridge.invoke(            &quot;getBrandWCPayRequest&quot;, {                &quot;appId&quot;: args.appId,     //公众号名称，由商户传入                &quot;timeStamp&quot;: args.timeStamp,         //时间戳，自1970年以来的秒数                &quot;nonceStr&quot;: args.nonceStr, //随机串                &quot;package&quot;: &quot;prepay_id=&quot;+args.package,                &quot;signType&quot;: args.signType, //微信签名方式：                &quot;paySign&quot;: args.paySign //微信签名,            }, function (res) {                //res.err_msg == &quot;get_brand_wcpay_request:ok&quot; 表示支付成功，按需处理结果                if (res.err_msg == &quot;get_brand_wcpay_request:ok&quot;) {                    window.location.replace(&quot;/scan/callpay/gsm&quot;);                } else {                    window.location.replace(&quot;/scan/callpay/failed&quot;);                }            });    }</code></pre><p>比较乱，后面再重新整理，现做一下简单记录，防止忘了。</p>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NodeJs</tag>
      
      <tag>微信</tag>
      
      <tag>支付</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔2019-10-30</title>
    <link href="/2019/10/30/%E9%9A%8F%E7%AC%942019-10-30/"/>
    <url>/2019/10/30/%E9%9A%8F%E7%AC%942019-10-30/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误，请不要再试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码方可查看</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="95d7459187a3bcfc4fdff260734b8fa1de7e7b7532c462c35b68a51b261f246b">dc2728d6a5fdc5d51adef584189612c9b3c0808bb563b842bdd871f5adcc71011325cb8a809cedcb0a3242ab5b81bd9a36f0f2a298badb77ed73689315a487119a5fe111b79269aaf8f9b57d748c2e7c6b9e712120535a6a9f1976b9dbc6ba0d454d32024923406a6b1502fd53ae2f7836808a476de8b7aaaee2bc30f063e40a0ee5bd6c88d501de93e0b53b822abda53b026279e5c4bf49d9363c236d62aaeb3c5f97b47a9badae1ab8746b5286f3d3a2db63cf2926545c51c54d76c073528181d0e845a81367bc1e072bb8c102111698ccfee6830ff64feb5ba31d9cffaedb1bf2f9dbc401010049f04d258c75497029e111ffb125e525d7c1f0f648ff6ea20d52b6272a51eaabd6c8b63268c9204530cb1231e86d4bc87aeff22ac6d0f07e9bb1f366d0d25d8cfd1e429c27e40f7e39ef2e4b0d2ba45caf95884e197b11f34a2657a295606005a438fd151bb6474f503e0f7116aa1e58c64a27ad6e1b81ef425f791cc51693c334828de3b6306f1f2d1fc2483a130856bc5e42f37c6c3f6203735daa9f340a7070c1462076958b4c4aa6df01660985a1d86dca44e86587dc650ef5c43e1aec26167d880ff12c1df204c11f55b0e03e072a847fc35ec48990ccd7ad06ee4763a2a372c665909a66a324ac83fdc04be9d1b7d2293e5e8bce218adfea29a96b83690dc71729e5e3f294303cf16dd20633186640a4927ed523b342964560cce2d7b2e23394031d32d69be4c42061b7d692b5f49bb0a5c4ed3aff3966dba4bf6367db5f3e93450f7c0f710258f07cd543846d2c307a7fa028ad4e2f8676fdb2703d45244dda3989fdf8f332e09cdbcdf33f61f14b565d6dd6d6eff6c2e7b75034d1507aee6c68e49c2529368ab40c261699de8e04fea9613902c8f7d16ff052b632d88e349e6e3f0ad760005ee06e3e259272cff38969818a4644346f08e3a3daee41cbdd8c832ca1417e4651eb96ff453f955394ba4ecc684b97b23d935f107cc88771ea01a9660c23b5c810396954f4bbc08b0f414ddaba367a27f33ff3221a900cba1c44d0c53f2910e6e16c68100626d5ca596b3718cbb567142418abafc6bac302ac9485ee3b83e2e65e72a81efbb805776cc68b8f342c844eb944e147ce7144b322f212db98db64352a355945d51f4ab967839ce5e860f358e12b4c2cb3d40e9dc3de718f355c06ebd973a97d341e67c7db127c88372502c4f71e1c045a69801c757869c66e0950920d4b5571de0e9c3a2db820fb8e1f5f4e106fd7f25395b1429e4d9e7c8b70466d59a5c89be1af4445c6db9e17e95c8c2c5bfc58d2f14c2e37d07a67c1a961d4a23fa11823c092fc02919730ef83a6a7b4e4c80651ed16ed37a7e45b2de3f6bb7ad28d7b79bca4458fa73ba9316df1d1fbdd11292665def65e6a6ee45cff73b3599cb0f1fddb8d968f8a98b480ffaab04daf5af39c062d1374ac43a18d6dad2ac07e0676e4704ba6c46ab86c8d55d1c65e195eeaedc64169460c28c125d344f1ebb9918c3bcc73c5db4516176dc6df50be3a4cdb42ea7ef22b38206db50a5ebd3e571dd051bb967496947612ec292a20e230fc390e476cb8c9291da28d6828c51f48b01af93668f489d4f0c45b98a5cc21501e68b6e17793714a15e5b882401b706cfde6e54261dc890a5b3495444c230a030e02583ec4aaee56c4a4397088b9c83225cd6ea6e394b50ef1e8b98174c2b22c8f390b2e960049e796a50885c95d2b54dcca580046138bddf4f12d604c827c062fa53a74f3f9b29b4461d9ecc4dcddb73df6f6e4582b8f96d28defd441c707811f17d3d6cf77feafccdcf044f5275e0c21af9557a0eba3b2e6808c823e95b366be06ce857a4931ed9b8513fe05e348ad5b9c59707bb963200013aec9bacc</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>累</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx相关操作</title>
    <link href="/2019/10/23/Nginx%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <url>/2019/10/23/Nginx%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows开机启动"><a href="#Windows开机启动" class="headerlink" title="Windows开机启动"></a>Windows开机启动</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://bolg-1253436879.cos.ap-chengdu.myqcloud.com/files/WinSW.exe" target="_blank" rel="noopener">点击下载</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="将软件放到nginx目录-并将名称改为nginx-service-exe"><a href="#将软件放到nginx目录-并将名称改为nginx-service-exe" class="headerlink" title="将软件放到nginx目录,并将名称改为nginx-service.exe"></a>将软件放到nginx目录,并将名称改为nginx-service.exe</h3><h3 id="新建nginx-service-xml文件"><a href="#新建nginx-service-xml文件" class="headerlink" title="新建nginx-service.xml文件"></a>新建nginx-service.xml文件</h3><p>键入内容</p><pre><code>&lt;!-- nginx-service.xml --&gt;&lt;service&gt;    &lt;id&gt;nginx&lt;/id&gt;    &lt;name&gt;nginx&lt;/name&gt;    &lt;description&gt;nginx&lt;/description&gt;    &lt;logpath&gt;(填写nginx目录，如：D:nginx-1.14.0\)&lt;/logpath&gt;    &lt;logmode&gt;roll&lt;/logmode&gt;    &lt;depend&gt;&lt;/depend&gt;    &lt;executable&gt;(填写nginx目录和命令，如：D:nginx-1.14.0\nginx.exe)&lt;/executable&gt;    &lt;stopexecutable&gt;(填写nginx目录和命令，如：D:nginx-1.14.0\nginx.exe -s stop)&lt;/stopexecutable&gt;&lt;/service&gt;</code></pre><h3 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h3><p>在nginx文件夹根目录中打开命令行</p><pre><code>.\nginx-service.exe install </code></pre><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><pre><code>.\nginx-service.exe start</code></pre><h1 id="Ubuntu下的操作"><a href="#Ubuntu下的操作" class="headerlink" title="Ubuntu下的操作"></a>Ubuntu下的操作</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><pre><code>sudo apt-get install nginx</code></pre><h2 id="自动启动服务"><a href="#自动启动服务" class="headerlink" title="自动启动服务"></a>自动启动服务</h2><pre><code>sudo systemctl enable nginx #开启服务sudo systemctl disable nginx #关闭服务</code></pre><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><pre><code>sudo systemctl start nginx  #启用nginx服务nginx #启动nginxnginx -s stop #停止nginxnginx -s reload #重启nginx</code></pre><h2 id="强行停止"><a href="#强行停止" class="headerlink" title="强行停止"></a>强行停止</h2><pre><code>ps -ef | grep nginx #查询进程IDkill -9 ID #强制停止</code></pre><h1 id="常规配置"><a href="#常规配置" class="headerlink" title="常规配置"></a>常规配置</h1><h2 id="ssh证书配置"><a href="#ssh证书配置" class="headerlink" title="ssh证书配置"></a>ssh证书配置</h2><p>按如下配置即可</p><pre><code>server {    listen 443 ssl;    server_name  www.xxx.cn; #域名    ssl_certificate xxx.cn.crt; #下载的证书，放在当前文件夹中    ssl_certificate_key xxx.cn.key; #下载的证书    ssl_session_timeout 5m;    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置    ssl_prefer_server_ciphers on;    location / {        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection &quot;upgrade&quot;;        proxy_http_version 1.1;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_set_header Host $host;        proxy_pass http://127.0.0.1:1111; #指向后台程序        proxy_redirect off;    }}</code></pre><h2 id="80端口转443端口"><a href="#80端口转443端口" class="headerlink" title="80端口转443端口"></a>80端口转443端口</h2><p>之前APP是80端口，现在升级为HTTPS后，post请求变成GET了。<br>按如下配置判断是否是POST请求，如果是用原来的接口返回，否则转移到443</p><pre><code>server {    listen 80;    server_name www.xxx.cn;    location / {        if ($request_method ~ ^(POST)$) {            proxy_pass http://127.0.0.1:8765;            break ;        }        return 301 https://www.xxx.cn$request_uri;    }}</code></pre><p>如果不需要判断POST，直接替换为443即可</p><pre><code>server {    listen 80;    server_name www.xxx.cn;    return 301 https://www.xxx.cn$request_uri;}# 添加个443 server，和上面的443一致</code></pre><h2 id="上传图片太大，导致失败"><a href="#上传图片太大，导致失败" class="headerlink" title="上传图片太大，导致失败"></a>上传图片太大，导致失败</h2><p>需要在nginx配置文件中添加如下配置</p><pre><code>client_max_body_size 1024m; # 大小自己定#server {#    listen 80;#}</code></pre>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔2019-10-23</title>
    <link href="/2019/10/23/%E9%9A%8F%E7%AC%942019-10-23/"/>
    <url>/2019/10/23/%E9%9A%8F%E7%AC%942019-10-23/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误，请不要再试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码方可查看</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="5cc083e1aa8536d99104878b3111889b2cdf2af224afd5305ad0594cbb183932">63c56cd7fc64e5cb54ec7c7c4a78ae849eba4efb3be99b487774627b1da7103c28101e6ee8c64516a2e20c336213db69d44bea5974ef19ebd499a2c8bbaa9611e690cbe378755d19743b0b0986124a052749dcf3bc9d185af6e1cf7cda69c39af172ee98d821e8cd7339fb7d9ce9f197bb49c6d2039a155ab9e839003325eee62d1b607c2a9b2e46e11192c08605bc99f1cfb349745146a2cd71f741ea590a22173b5303c0df653ea6835c1dd9445ece41eaba94c2dcb6864bdcbd75b7aa9b4ccd73d7db0dd7b0d027f50880877a8cd1fadf5ecae3c8ffc696e8acd1616393de0d30a62a4407fc3ac211b8dc19ba21d2f3dc95fd53124daa101cb6b1a44bb521d6a3cca7cc30fc800a7a11e2cd95f51f545811ab91598a62c193bba9793dffa5fc24671be3fd425bccd140227e936c65ac08a25b54324a9369aeb9631273bc28eef846e1e6782a6d1d0c952ad777a9f686e52728435f8f3e339a89f8118a54e684748d8e3c2789d2ac59b1eb0a9908eb39c61f39349bddbfef15577d4f68e9fe7105ec73deb7b16c0dce449533bab38bb214372e093f0d845a97a26b92d5099c29e64ea03af06638e8260c45781f257152aa0df2e437f0ec7c690ead3a33c6f2c61113e9009e5e0dbe4520d236032af2642f82aeb701e546c4ea9d8e9601a66cc539c8b11f84c495fc431f5308ba513f45044292ce0f3fee7fa480421f5cd496778f8bcf67796a5bd35191001ac2da687d335c67a7e8ebca831c62c5f518cb1f4349e01582423927582af7612f6271771fe54b077b8e86a33f7f3fdebe1b9dd0d19726279514ddefc7050d704b5f59b44bf16bb970398d2f4c53d0c6a1b7283b25443d8248ec855f8ff87ed4a1f6cc918581079928ba54ba82723184ee7af7435175ba32b4a634b76a835212e4d960814ebc73b9e89abc3713e851a551a43fe096eb7ec19bce8a2ff93344cb28858fad60dbf7383197095e64a5dc5f850658607d0bb3555804fcabf6e2976dfab3698a9aa5fa8cd1c7086b8073a55f13e2c5c609234bb928bea3c98a135bc2bd4c39ad11146365b99bf6d38680b0c5216c44f6</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>换岗</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows安装Redis和添加开机启动服务</title>
    <link href="/2019/10/23/Windows%E5%AE%89%E8%A3%85Redis/"/>
    <url>/2019/10/23/Windows%E5%AE%89%E8%A3%85Redis/</url>
    
    <content type="html"><![CDATA[<p>Windows上安装Redis和服务，做下记录</p><h3 id="下载Reis（版本3-2-100）"><a href="#下载Reis（版本3-2-100）" class="headerlink" title="下载Reis（版本3.2.100）"></a>下载Reis（版本3.2.100）</h3><p>也可以在github下载，就是太慢了<br><a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">GitHub下载</a><br>百度网盘下载<br>链接: <a href="https://pan.baidu.com/s/1AC_k0XnL8JnMOPDTA3cb_w" target="_blank" rel="noopener">https://pan.baidu.com/s/1AC_k0XnL8JnMOPDTA3cb_w</a> 提取码: bkjg</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>解压下载文件到指定目录<blockquote><p>不需要启动下面3步可以忽略</p></blockquote></li><li>进入Redis文件reids-server.exe的目录</li><li>在此文件夹打开命令行</li><li>输入reids-server.exe启动redis</li></ul><h3 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h3><p>进入redis根目录</p><pre><code>redis-server.exe --service-install redis.windows.conf</code></pre><p>服务安装成功</p><p>进入服务列表启动下服务完成操作</p>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔2019-10-22</title>
    <link href="/2019/10/22/%E9%9A%8F%E7%AC%942019-10-22/"/>
    <url>/2019/10/22/%E9%9A%8F%E7%AC%942019-10-22/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误，请不要再试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码方可查看</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="9f84d8ae438f10748cd0da10c012fdd4c4d8d45920b514d831a9b06c010eb27c">ea0973d4dc1078d24d5f54fa8f2e6620c44415909b8bbff9dc5b680ac8edc9c43f78d7296c8e97839205c7dbf8b9b24b0ca40fa8a6c7bd4929fb987ee340ef37e6956a88ca8fbdda853cc305f0246e9d0b076e60127b00074c4f2e5d8dbb0da369d63afe3cc7f3752ccccdc2794fbf11abecbcd2ad09d6eeaacc50fc7576dd112b7e4b53a84a271777a35786b16ff7cf130e47011c296671bc91751914df1766f7c3f09307623a7c138fb2e8b9943f35cbaddfc96c93ae84de7fcea06ff2c373f105ff12c07df7c6c15c1458687250c736ef36e67766dda86e8b36077c97f52b987ba346cac2b38913fdeb07922c8a064b1a05e1020eb0543d5406ab4bd713b2b06acfd396d664005babbf498a5766497e83b9d2b519dc36728ac9102f9c58c6fa75f645978893ea95a272d946605a5fb012035050722ca74a1fea01255a3e3e4e85bba0d4f3d7d6eb549f2ee09aaa3111987796ee7dc94f922bb0382e2557079ea2e39339b0827bbe1ae2a4ee9a43dd0eda902d38b0382a6682b49a67ac492363a57b58e6f7d4591cc49c964d88f798d4e4af26da1a6a817bc1f1e59b13e64823487454a2b8724f77d6301b381924e538611b424f49d653631a0ecb715a6919d273eb6ddddb0bab8322c844fcf36a384fc2549977b4d9990d10bf544ecd802c69e0714bb031e283b82840119c582234d428b7b3da5bb60393e3daeedc1791e70b7e55460500555c8d83f79cf154c739daedf6790882f9712315f169147babb4a1acd673cc611dfbd15c7062f0963521267c77c026af7235cbaa39530f9086ded9eb259e7d2ebb756da0227c7a49ba21a8c3f1b6187fbdadece20ea3d0361d3b971a0ec9e71f3ec2efb3245bb22c05ce</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>想念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PM2开机启动</title>
    <link href="/2019/10/22/PM2%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/"/>
    <url>/2019/10/22/PM2%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Windows开机启动"><a href="#Windows开机启动" class="headerlink" title="Windows开机启动"></a>Windows开机启动</h2><ul><li>安装启动库</li></ul><pre><code>npm install pm2-windows-startup -g</code></pre><ul><li>执行命令</li></ul><pre><code>pm2-startup install</code></pre><ul><li>设置开机启动</li></ul><pre><code>pm2 start [程序]</code></pre><pre><code>pm2 startup</code></pre><pre><code>pm2 save</code></pre><h2 id="Linux开机启动"><a href="#Linux开机启动" class="headerlink" title="Linux开机启动"></a>Linux开机启动</h2><p>linux开机启动分为三步</p><pre><code>pm2 start [程序]</code></pre><pre><code>pm2 startup</code></pre><pre><code>pm2 save</code></pre><p>重启测试，如果不成功，根据提示操作即可。</p>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pm2</tag>
      
      <tag>开机启动</tag>
      
      <tag>NodeJs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派搭建MQTT</title>
    <link href="/2019/07/04/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAMQTT/"/>
    <url>/2019/07/04/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAMQTT/</url>
    
    <content type="html"><![CDATA[<h2 id="Nodejs安装"><a href="#Nodejs安装" class="headerlink" title="Nodejs安装"></a>Nodejs安装</h2><p>*以下命令皆在命令行输入</p><ol><li>进入指定文件夹<br>cd /home/pi（也可以选择其他文件夹）</li><li><p>下载nodejs<br>Nodejs版本要选择armv71的</p><pre><code>wget https://nodejs.org/dist/v6.9.1/node-v6.9.1-linux-armv7l.tar.gz（版本号根据需要选择）</code></pre><p> 如果速度慢，可以自己去上面的网址下载</p></li><li><p>解压文件</p><pre><code>tar zxvf node-v6.9.1-linux-armv7l.tar.gz （文件名跟自己下载的相符）</code></pre></li><li><p>将解压好的nodejs剪切到下面的bin文件夹</p><pre><code>sudo mv node-v6.9.1-linux-armv7l  /usr/local/bin（文件名跟解压的相符）</code></pre></li><li><p>创建node快捷方式</p><pre><code>sudo ln /usr/local/bin/node-v6.9.1-linux-armv7l/bin/node /usr/local/bin/node（文件名跟解压的相符）</code></pre></li><li>创建npm快捷方式<pre><code>sudo ln -s /usr/local/bin/node-v6.9.1-linux-armv7l/lib/node_modules/npm/bin/npm /usr/local/bin/npm（文件名跟解压的相符）</code></pre></li></ol><p>正常是已经OK了，使用node –v和npm –v，发现npm找不到</p><p>将/usr/local/bin/node-v6.9.1-linux-armv7l/lib下的node_modules复制到/usr/local/bin下</p><p>进入/usr/local/bin文件夹</p><pre><code>cd  /usr/local/binsudo cp –r /usr/local/bin/node-v6.9.1-linux-armv7l/lib/node_modules /usr/local/bin</code></pre><p>已经就是nodejs配置完成</p><h2 id="Mqtt服务端安装"><a href="#Mqtt服务端安装" class="headerlink" title="Mqtt服务端安装"></a>Mqtt服务端安装</h2><p>新建一个js文件，输入如下测试代码：</p><pre><code>var mosca = require(&#39;mosca&#39;);  var MqttServer = new mosca.Server({  port: 1883  });  MqttServer.on(&#39;clientConnected&#39;, function(client){          console.log(&#39;client connected&#39;, client.id);  });  /**  * 监听MQTT主题消息  **/  MqttServer.on(&#39;published&#39;, function(packet, client) {      var topic = packet.topic;      console.log(&#39;message-arrived---&gt;&#39;,&#39;topic =&#39;+topic+&#39;,message = &#39;+ packet.payload.toString());  });  MqttServer.on(&#39;ready&#39;, function(){      console.log(&#39;mqtt is running...&#39;);      //MqttServer.authenticate = authenticate;  }); </code></pre><h2 id="安装mosca"><a href="#安装mosca" class="headerlink" title="安装mosca"></a>安装mosca</h2><pre><code>npm  i  mosca –save</code></pre><p>安装完成以后运行上面的代码完成。</p><h2 id="安装vnc-可选"><a href="#安装vnc-可选" class="headerlink" title="安装vnc(可选)"></a>安装vnc(可选)</h2><p>在树莓派安装vnc</p><pre><code>sudo apt-get install tightvncserver</code></pre><p>增加一个桌面</p><pre><code>Tightvncserver</code></pre><p>根据提示设置一个访问桌面的密码</p><p>根据提示设置一个仅能看树莓派着的密码</p><p>设置完成后，回到一个桌面的ID，例如是1</p><p>在windows打开vnc（如果未安装请自行安装），输入树莓派ip加桌面id，例如：192.168.0.102:1<br>输入密码访问密码</p><p>现在可以访问树莓派!</p>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NodeJs</tag>
      
      <tag>raspberry</tag>
      
      <tag>树莓派</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔2019-04-18</title>
    <link href="/2019/04/18/%E9%9A%8F%E7%AC%942019-04-18/"/>
    <url>/2019/04/18/%E9%9A%8F%E7%AC%942019-04-18/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误，请不要再试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码方可查看</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="b01ea421c27f54744627d66a5fef89cc0588c00444dcb03e5b40c9b60c004436">d5099ab253f786d7e6c78e98c6ed1df8ab730e724f869566f7414b50cbd9160f9d6f047c076be692e3487d93f5211379c545982a87e7abb6df34486e36a7ca105268e61c25db8a68373f8aa371e3f86b8f8079664bf64b450778340baf7ecaeb905afa20a72388fe19d561682cf491f9e20cf9ec1c2e53bfe024171de5bb0900a6dccb58b5e59ce19686a7a6242c05e9527d110523f5fea8bfd0fae704893ddae118ec4179082a1fbc781715488a4dd20697dc21048970f5b7928ee4918df289830f3b8284e7ae6a99018f340562351c4dbc768913c302fc3defbed6c2ffa6a1813b46ff75168f77c98a498e478e4ac6c38d653bb2829496f485999f68563645385beb6749d317174ee71af8d7ea5365dd8aa4e008919e31900423e8482171f74be7d2ecc853212ce61ce1f20e41326cd57e835bda34bc74ea02580ed36a7434e6a85209553a05f4de964cf49b55e81e8196c7f59bf80e62e1e2193d0011d5e7</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>撸猫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔2019-04-06</title>
    <link href="/2019/04/06/%E9%9A%8F%E7%AC%942019-04-06/"/>
    <url>/2019/04/06/%E9%9A%8F%E7%AC%942019-04-06/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误，请不要再试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码方可查看</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e24fca80ef40e6c498f0adbb5114035aa2126e0598c2f49161c9ff4cc2c86397">3edc6f8e2015e2a99078aee03964848b2d56e6303883cb694dc9726a7385bc385bbbf5542bc1b70d5245cc26f9f4a7c31ec04ce61f941dae1f929e4da1e7ed753a9d7aa2f5aa7ef5caaa48110f9a0ede2257e975761ae5fbc8ecd8ade235b8217b54677e829a9ef2f22fc2ab68a5b725e3feb346e584f77cc9fe202c398e224d7bb63c05976bbae0cf5e8c9b91caa9b30f02cff897337d53deef55bff5c02c445401db3467b9804e482c07190f8fc52be594f8993d83ff30b9ef9041c286925f8c31d13b82d036a51480800cde29339f856cf41701f3e29dc82415cccb21b63d7336ee6f90057d03c3f61e0c437be5229866daa8641a1caff11486eb1f130c5448ac53c268193f13a7326eaebfd2c2b657d5eab303e59da9abb3ce79523444f5c1b6fdf77683a59daaaa9dd0ad163ef3ccc527bf1d23e09b0c234d09a1425e0638a18928865b58ac03533180e6af25bf5cd0a8535a4e0b11af40b646b8ad6bd6e80712ca1f9a0cd1eb182599c5b12409468592b0fd283642c709c337586c4413e26d39551986be2df9a8de90a4eac34dab8876a6168c6b3e2b535162a5fd39fcc97aa19dc00c56a25684e3566d847f15581955a1482538677b7fc8514367ea936daab344b9c716e77715b687f71659f6e98644049ffc470a1773ff77d2d9712153b410d0711e4844aa876be1236269facdc3f82599e9373e719fb6083e71c34041f160c43384f807f3531364134fe01e4f6fd7d17ef858c7abfb34f0cd9a6ba34f44b49a3043272b96c219ec79d399d748ced892e218c6bdb7972c83a52b6a25f948c8140368417a1668852b455deeec12e0a50a1a57f9f42875a7fdcd20353926567da66bebfebdfd0d0600acd21072c2a90e303e3d0dd13f0908c6ae3674455434d0f544333ad1dd9df55d45e1f226cbb21b9d57c807a1d12e2bae138780b629934d346c11c24d79dd59c4a74a9bd5d25f5ed71a4fcd66c1f623a12012d04ba669bc7be04bcc405506c82504ccced5e445a7cf27d11ffe0d31301138a1d2af973e4db103ee410496f8f90d57d31192a67b7de982598cf859aee2aa81ef4f06900ddb6098c2e413b302c3a29cc2a4eb644ef66497c2335bd6569bb42d91891f4eafa19c33749ae2bf52859c125e4591db2e5b4c130c70798fd12b091492ab74df67c98a113c209c67544538adfbb8221cf6b2220d2314ff4dba011b80e8ede6475ffad4f789c19d0821dfe3564e69cdb940d1a73c34e17968a85918f3fd1fe0a66636a487a31182dd8e8866eb4b518be4d98569797028fc1d35cb901b0a34aebf32a165082b0acb78e2e644541caca01026508c18c8bf6b40a265c1cd455d6ee3e27d87b9cfc867e52a99aa387ae45650b0f89221df169ee422dc1058e9648c7c152253a8d0e3a8737fc15cbdbfa710726048d05cf154249582ccb255aa39127aebfaf553e8d57a22bbba0cca075272807b461ca977c425e07570d18833913018501fe27fa5dc087f76bfe7fb43d315eea69c1ffa56d649ae8bb7248f79244de3a66a36133732f1d901bb4d1ac5ebed5928b575c87f3ed3dba7051f142e363f1f0b284294eb396d3a2bfa73bd82e33a16b3fab0df8c4b2ebac54eca42d006cd172e76d0aa0b4b1b339aa44c1ba6236ff4cf9accaa01920b67fcae30d7b9d0d48e69ae304d249832a483e205ccd4f5d2d5d96bd72345323926e5c2b8fbdaf24efb4edec5501ee559a19d6111f1b7bd292d59daad4ef3457f40a58f2e098ba583875612f409ce752efa14ef6780de6cb08e1608c88bea8c5e7bf69fb48d93adb2a51b22ff735cd115b30ec667105b8c20dc2410ace6cbea7a37f06323364d61f992f2f18aa4f61da3e0afa414b7db74d72edfa59fa9e21f0254fe741eb50d7f4bff69a572e7708318e73dcd662fa9eaa420fc905c88b4723da9a370cd546748c48b32c8a8b339dd0a3f515bc9d4b7e0cc3320f34f05f89ec2b66fa260e11cfcd31018d886babb9db9da494560caaf66b1ffaabb5e467dd8889d224474283130a0dbc7bfc0cbf0836ba5a1d769416e35165df6d2465c363aae045d6f35270a9597412be64991c03462e1c0151c4448a83ea2ceddfe98b86dc4cd9c2b940a5a1ddd9f398c5d3d54b88e30c1ed18b76301678c8b28047fce24e70d437e353736c1d0c493fb7324b86a6af5b005f50dc423431b35a10ddecb148413dee3d6a316d91fa16ce563bc0f8856c4dc58cef2cb1f8ee1b9fe4bd4948bc2facd12115d19ca92a979edb3d76c1b109801be6d5bf7cb07fced40ef472c330544e6007021d81f31abe53a92d6f6c072b76a58ba65fef00538e444060b24191e560fb0185fbb5a6eb68d652cf5fa5eea5d6b8c09b95935fe9b3e6194114f7d5cc9ee024c0ba97138694afd2fac4d5bbc27c03fa5358935a987bc0c33676e292812269688a1e5273320d9f6b5e785b737b3010bfdba201010f453980ab7f273dae70b2563d701cee33ac6ed42f9932a16fba6e192be837ffbff45be4c455a9d3d6716af2bc17cc11f2e59c439154a6cd8bc398fd0258a5c96ee4a8e00b19c0406f82d3ae2fce4921b5ce105a784238b04b37aa8eee621e21c9ddd266fa07df5ee3df2a455ca568c35ab462e96b8a427087ec2497987901e5d99d06fbb5159e55d1ab7594b9579081b74bfc28707051dd040b5dd44f21140fb623b2df49bb9115f12dde9408a6f793db6e006b8d0008d0dafe5138563e52368aa88b5dbece0ae81062d446d099eaed8e30aa73859cb684eba3f85065b27e21ca1d88836f00d5de5405091ce05f3883990c69650aebee8b086278305a06fb71526a57edbacdf79551d9969329d5a150deab8b773fdd3951d1dbae2fea2f298aea8d7416a98f068ed4829ecb7142665ece1e8d58bf82887c043e6d775b9d289158d4c43cfad835f81701cf4b35052fd87b6a29c53289d1082742d11c4eee5c259</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>偏心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>async模块使用</title>
    <link href="/2019/03/21/async%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/"/>
    <url>/2019/03/21/async%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="顺序执行"><a href="#顺序执行" class="headerlink" title="顺序执行"></a>顺序执行</h2><h3 id="异步循环操作"><a href="#异步循环操作" class="headerlink" title="异步循环操作"></a>异步循环操作</h3><p>示例</p><pre><code>const async = require(&#39;async&#39;);const axios = require(&#39;axios&#39;);//计数let count = 0;//测试数据var urlList = [&#39;test1.html&#39;,&#39;test2.html&#39;,&#39;test3.html&#39;,&#39;test4.html&#39;,&#39;test5.html&#39;];//执行方法let action = function(callback){    //测试数据    console.log(urlList[count]);    //异步请求    axios.get(&#39;https://hhclub.net/api/v1/getVideos&#39;)    .then(function(res){        //执行完数量加1        count++;        console.dir(count);        //回调函数        callback(null,count);    })}//计数方法let countFunc = function(){    //小于多少就执行多少次，如这里是执行5次    return count &lt; 5;}//开始执行，使用whilst方法async.whilst(countFunc,action,function(err){    if (err) {        console.dir(err);    }    console.log(&#39;结束&#39;)})</code></pre><p>打印结果</p><pre><code>test1.html1test2.html2test3.html3test4.html4test5.html5结束</code></pre><h3 id="添加延迟"><a href="#添加延迟" class="headerlink" title="添加延迟"></a>添加延迟</h3><p>示例</p><pre><code>var async = require(&#39;async&#39;);let action1 = function(callback){    console.log(&#39;执行时间：&#39;+new Date().getTime());    callback(null,&#39;action1&#39;);}let action2 = function(callback){    console.log(&#39;执行时间：&#39;+new Date().getTime());    callback(null,&#39;action2&#39;);}let action3 = function(callback){    console.log(&#39;执行时间：&#39;+new Date().getTime());    callback(null,&#39;action3&#39;);}let action4 = function(callback){    console.log(&#39;执行时间：&#39;+new Date().getTime());    callback(null,&#39;action4&#39;);}let delay = function(callback){    setTimeout(function(){        callback(null,&#39;delay&#39;);    },2000)}async.series([action1,delay,action2,delay,action3,delay,action4,delay],function(err){    if (err) {        console.dir(err);    }    console.log(&#39;结束&#39;+new Date().getTime())})</code></pre><p>打印结果</p><pre><code>执行时间：1553185376354执行时间：1553185378362执行时间：1553185380365执行时间：1553185382371结束1553185384373</code></pre><h2 id="并行执行"><a href="#并行执行" class="headerlink" title="并行执行"></a>并行执行</h2><p>并行执行和顺序执行类似，并行执行是多个函数同时运行，最后一个执行完后结束</p><p>使用方法</p><pre><code>parallel(tasks,[callback])</code></pre><h2 id="瀑布流执行"><a href="#瀑布流执行" class="headerlink" title="瀑布流执行"></a>瀑布流执行</h2><p>下一个函数需要上一个执行结果</p><p>使用方法</p><pre><code>waterfall(tasks,[callback])</code></pre><p>示例</p><pre><code>var task1 =function(callback){    console.log(&quot;task1&quot;);    callback(null,&quot;11&quot;)}//param为第一个函数的结果var task2 =function(param,callback){    console.log(&quot;task2&quot;);    callback(null,&quot;22&quot;)}async.waterfall([task1,task2],function(err,result){    if (err) {        console.log(err);    }    console.log(&quot;result : &quot;+result);})</code></pre><h2 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h2><p>可以用作循环加延迟</p><p>使用方法</p><pre><code>forever([callback])</code></pre><p>示例</p><pre><code>var async = require(&#39;async&#39;);var count = 0;async.forever(function(callback){    console.log(&quot;当前结果：&quot;+new Date().getTime());    count++;    if (count&gt;10) {        callback(&quot;finish&quot;);        return;    }    //添加一秒延迟    setTimeout(function () {        callback();    },1000)},function(err){    console.log(err);});</code></pre><p>输出结果</p><pre><code>当前结果：1553186956484当前结果：1553186957494当前结果：1553186958496当前结果：1553186959499当前结果：1553186960501当前结果：1553186961503当前结果：1553186962505当前结果：1553186963510当前结果：1553186964516当前结果：1553186965519当前结果：1553186966524finish</code></pre>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NodeJs</tag>
      
      <tag>async</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sequelize常用功能</title>
    <link href="/2019/03/21/Sequelize%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/"/>
    <url>/2019/03/21/Sequelize%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>npm i sequelize --save</code></pre><h3 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h3><pre><code>global.seq =  new Sequelize(&#39;数据库名称&#39;, &#39;用户名&#39;, &#39;密码&#39;,{    host: &#39;数据库地址（如：127.0.0.1）&#39;,    dialect: &#39;数据库类型（如：mysql）&#39;,    port: 数据库端口（如：3306）,    pool: {//线程池配置        max: 5,        min: 0,        idle: 30000    },    logging:true,//是否在控制台打印sql语句    timezone: &#39;+08:00&#39; //东八时区，不设置存入数据库的时间可能不对});</code></pre><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><pre><code>seq.define(&#39;test&#39;, {    // auto increment, primaryKey, unique    id: {type: Sequelize.INTEGER, autoIncrement: true, primaryKey: true, unique: true},    updatedAt: {type: Sequelize.INTEGER, allowNull: false},    createdAt: {type: Sequelize.INTEGER, allowNull: false}}, {    timestamps: true,//设置为true，自动设置update和create    freezeTableName: true//设置为true，表的名字和数据库一直，否则要变成复数加s});</code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="order排序"><a href="#order排序" class="headerlink" title="order排序"></a>order排序</h3><pre><code>CameraList.findAll({    where:{        account:user    },    order: [        [&#39;timestamp&#39;, &#39;ASC&#39;],//第一字段        [&#39;name&#39;,&#39;ASC&#39;]//第二字段    ]})</code></pre><h3 id="where条件"><a href="#where条件" class="headerlink" title="where条件"></a>where条件</h3><pre><code>Project.findAll({  where: {    id: {      $and: {a: 5}           // AND (a = 5)      $or: [{a: 5}, {a: 6}]  // (a = 5 OR a = 6)      $gt: 6,                // id &gt; 6      $gte: 6,               // id &gt;= 6      $lt: 10,               // id &lt; 10      $lte: 10,              // id &lt;= 10      $ne: 20,               // id != 20      $between: [6, 10],     // BETWEEN 6 AND 10      $notBetween: [11, 15], // NOT BETWEEN 11 AND 15      $in: [1, 2],           // IN [1, 2]      $notIn: [1, 2],        // NOT IN [1, 2]      $like: &#39;%hat&#39;,         // LIKE &#39;%hat&#39;      $notLike: &#39;%hat&#39;       // NOT LIKE &#39;%hat&#39;      $iLike: &#39;%hat&#39;         // ILIKE &#39;%hat&#39; (case insensitive)  (PG only)      $notILike: &#39;%hat&#39;      // NOT ILIKE &#39;%hat&#39;  (PG only)      $overlap: [1, 2]       // &amp;&amp; [1, 2] (PG array overlap operator)      $contains: [1, 2]      // @&gt; [1, 2] (PG array contains operator)      $contained: [1, 2]     // &lt;@ [1, 2] (PG array contained by operator)      $any: [2,3]            // ANY ARRAY[2, 3]::INTEGER (PG only)    },    status: {      $not: false,           // status NOT FALSE    }  }})</code></pre><h3 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h3><pre><code>Project.findAll({ where: [&quot;id &gt; ?&quot;, 25] }).then(function(projects) {  // projects 是一个包含 Project 实例的数组，各实例的id 大于25})</code></pre><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><pre><code>//求和Project.sum(&#39;field&#39;, where:{--条件--}  }).then(function(sum) {  // 输出和})//maxProject.max(&#39;field&#39;, where:{--条件--}  }).then(function(max) {  // 输出最大值})//minProject.min(&#39;field&#39;, where:{--条件--}  }).then(function(max) {  // 输出最小值})</code></pre><h3 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h3><pre><code>//调用Sequelize初始化之后的sequelize对象sequelize.transaction(function (t) {    //返回最终的Promise  return User.create({    firstName: &#39;Abraham&#39;,    lastName: &#39;Lincoln&#39;  }, {transaction: t}).then(function (user) {    return user.setShooter({      firstName: &#39;John&#39;,      lastName: &#39;Boothe&#39;    }, {transaction: t});  });}).then(function (result) {  //主动调用commit提交结果  return t.commit();}).catch(function (err) {  //主动回滚操作  return t.rollback();});</code></pre><h2 id="sequelize在eggjs中的应用"><a href="#sequelize在eggjs中的应用" class="headerlink" title="sequelize在eggjs中的应用"></a>sequelize在eggjs中的应用</h2><h3 id="Op属性的运用"><a href="#Op属性的运用" class="headerlink" title="Op属性的运用"></a>Op属性的运用</h3><ul><li>gt、lt的使用 </li></ul><pre><code>  GsmCard.getWillExpire = async function(offset, limit, timestamp) {    console.log(&#39;ddd&#39; + timestamp);    return await this.findAndCountAll({      where: {        expiry_date: {          [Op.lt]: timestamp,        },      },      offset: Number(offset),//偏移量      limit: Number(limit),//数量    });  };</code></pre><ul><li>or的使用</li></ul><pre><code>  Account.getRootAccounts = async function() {    return await this.findAll({      where: {        [Op.or]: [          { type: &#39;admin&#39; }, { type: &#39;root&#39; },        ],      },    });  };</code></pre><h3 id="DISTINCT用法"><a href="#DISTINCT用法" class="headerlink" title="DISTINCT用法"></a>DISTINCT用法</h3><pre><code>    return await this.findAll({      attributes: [[ app.Sequelize.fn(&#39;DISTINCT&#39;, app.Sequelize.col(&#39;devicegroup&#39;)), &#39;devicegroup&#39; ]],      where: {        wechat,      },    });</code></pre><h2 id="更多参考"><a href="#更多参考" class="headerlink" title="更多参考"></a>更多参考</h2><blockquote><p><a href="https://itbilu.com/nodejs/npm/V1PExztfb.html" target="_blank" rel="noopener">https://itbilu.com/nodejs/npm/V1PExztfb.html</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NodeJs</tag>
      
      <tag>sequelize</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔2019-03-20</title>
    <link href="/2019/03/20/%E9%9A%8F%E7%AC%942019-03-20/"/>
    <url>/2019/03/20/%E9%9A%8F%E7%AC%942019-03-20/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误，请不要再试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码方可查看</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="995dee0feaad7d92ad6110987067a02b860e5c16185146f37d2efc9d8b29b64e">85aca84140db1d3d6aa0b221e6f66fba68967168de9c7b212b15e6f42fe865fa5ffa55ab886b7ec3049c9690b0cc8544d5ab0375bd7c7e660a1819e74c4f5e9c6a50ec7171bba2ede6329af86b8cd5d0f8253ca4e3248f4c9c6a85d74a75480697f11691e88af2900b8b441106cac87c2cb06e4d867082f248c1bc41a0e76b222c7cb62c14bfb47392f71f1cd7aba94fae261e5e5b4b1bcdd6d70f61e6dde03dc3f032f8969cfb704a526ec39b00c6f6f143e4e604f13e6990ae78147206c8b122bc5cf30d89f67b700c79112b1e0255b782198ca0d5fa3a4b1bd2bca7b2f8500eb172f98e2ea5828077a910ab5bca574e5e28c986de0445889c24b9981a315345782630e3607e025856c737ce03bb8bbe4a1e63e087067d9d4fdada37cd5d90ff14f8f9a5f8d736b9374a1dad06b9bbf9ee833734063720d8dd8c4666c7432cb124ea6981b86e87452e0de4fd38b576210bd88d325f5cb98884cf94b6f1414c1883f33bfca5bdac67996eff88de80c99297da1a5e7bb909e64b36faa32d1d03448287471ddbc6c490e9afb0c84e4d163cfa460fa35283bb95e56a53303f61e3c540d194a120566d6f6aad4edf4452d9</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>撸猫</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
